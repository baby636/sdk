<h1 id='api-reference'>API Reference</h1><h2 id='api-reference-run'>Run</h2>
<p><code>class Run { ... }</code></p>

<p>A Run instance coordinates activity between the application, its jigs and other creations, and the blockchain. You always create a Run instance when you use the Run library. This stores your settings, creates and signs transactions, loads jigs and code, connects to the blockchain network, securely sandboxes code, keeps an inventory of jigs, keeps a cache for fast loads, and more.</p>

<aside class="notice">
<b>Note:</b> You may create multiple Run instances, but there is only ever one <i>active</i> Run instance at a time, which is by default the last instance created. The active Run instance is the one whose configuration is being used.
</aside>
<h3 id='api-reference-run-constructor-options'>constructor(options)</h3>
<blockquote>
<p>Create a Run instance on Mocknet. The purse will be auto-funded.</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="na">network</span><span class="p">:</span> <span class="s1">'mock'</span> <span class="p">})</span>
</code></pre>
<blockquote>
<p>Create a run instance on Testnet</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="c1">// Create a run instance on testnet</span>
<span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span>
  <span class="na">network</span><span class="p">:</span> <span class="s1">'test'</span><span class="p">,</span>
  <span class="na">owner</span><span class="p">:</span> <span class="s1">'cTMHbJULREfbsUFsuJLMrNbJ7VrASgWeYfFF6EgJMy49ARnNed3d'</span><span class="p">,</span>
  <span class="na">purse</span><span class="p">:</span> <span class="s1">'cQP1h2zumWrCr2zxciuNeho61QUGtQ4zBKWFauk7WEhFb8kvjRTh'</span>
<span class="p">})</span>
</code></pre>
<p><code>constructor(options: object): Run</code></p>

<p>Creates a new Run instance.</p>

<p>The constructor takes many possible options, but the three most important options are <code>network</code>, <code>owner</code>, and <code>purse</code>. The network indicates which Bitcoin network to connect to. The <code>owner</code> and the <code>purse</code> are generally both private keys. The <code>owner</code> stores the user&#39;s jigs. Each live jig has a UTXO associated with it assigned to the owner&#39;s address. The <code>purse</code> is a separate private key used to pay the mining fees for Run transactions. It is best if the <code>owner</code> and <code>purse</code> are separate accounts so that jigs and money are kept in different wallets.</p>

<p>Creating a new <code>Run</code> instance will automatically activate it. See <code>run.activate()</code> for more information.</p>
<h4 id='api-reference-run-constructor-options-options'>Options</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><code>api</code></td>
<td>string</td>
<td>One of &#39;run&#39;, &#39;mattercloud&#39;, or &#39;whatsonchain&#39;</td>
<td>&#39;run&#39;</td>
</tr>
<tr>
<td><code>apiKey</code></td>
<td>string</td>
<td>Blockchain API key for MatterCloud or WhatsOnChain.</td>
<td>undefined</td>
</tr>
<tr>
<td><code>app</code></td>
<td>string</td>
<td>Application id to distinguish Run transactions. See <a href="#how-it-works">How It Works</a>.</td>
<td>Empty string</td>
</tr>
<tr>
<td><code>blockchain</code></td>
<td><code>Blockchain</code></td>
<td>Blockchain implementation for interacting with the Bitcoin network. If specified, then <code>network</code>, <code>api</code>, and <code>apiKey</code> are ignored.</td>
<td><code>RunConnect</code></td>
</tr>
<tr>
<td><code>cache</code></td>
<td><code>Cache</code></td>
<td>Cache API implementation that Run will use instead of the default</td>
<td><code>LocalCache</code> or  <code>BrowserCache</code></td>
</tr>
<tr>
<td><code>client</code></td>
<td>boolean</td>
<td>Whether to only load jigs from the cache and not replay transactions</td>
<td>false</td>
</tr>
<tr>
<td><code>logger</code></td>
<td><code>Logger</code></td>
<td>Logging object for internal run messages. If <code>logger</code> is null, then nothing will be logged. You may pass <code>console</code> as the logger to log everything.</td>
<td>Logs warnings and errors to the console</td>
</tr>
<tr>
<td><code>network</code></td>
<td>string</td>
<td>Bitcoin network, either <code>main</code>, <code>test</code>, <code>stn</code>, or <code>mock</code>.</td>
<td><code>main</code></td>
</tr>
<tr>
<td><code>networkTimeout</code></td>
<td>number</td>
<td>Timeout for network requests in milliseconds</td>
<td>10000</td>
</tr>
<tr>
<td><code>networkRetries</code></td>
<td>number</td>
<td>Number of times to retry network requests</td>
<td>2</td>
</tr>
<tr>
<td><code>owner</code></td>
<td>string or <code>Owner</code></td>
<td>Private key, public key, address, or <a href="#advanced-usage-locks">custom lock</a> used to own jigs and sign transactions</td>
<td>Randomly generated <code>LocalOwner</code></td>
</tr>
<tr>
<td><code>purse</code></td>
<td>string or <code>Purse</code></td>
<td>Private key or <code>Purse</code> API used to pay for transactions. On the mock network, the purse will be funded automatically. For other networks, the user must fund the purse.</td>
<td>Randomly generated <code>LocalPurse</code></td>
</tr>
<tr>
<td><code>timeout</code></td>
<td>number</td>
<td>Timeout for all Run actions in milliseconds</td>
<td>30000</td>
</tr>
<tr>
<td><code>trust</code></td>
<td><code>Array&lt;string&gt;</code> or &#39;*&#39;</td>
<td>IDs of transactions whose code is known not to be malicious</td>
<td>Empty array</td>
</tr>
<tr>
<td><code>wallet</code></td>
<td><code>Owner</code> and <code>Purse</code></td>
<td>A shorthand for a single object that implements both <code>Owner</code> and <code>Purse</code>. If specified, then <code>owner</code> and <code>purse</code> are ignored.</td>
<td>undefined</td>
</tr>
</tbody></table>
<h3 id='api-reference-run-activate'>activate()</h3>
<p><code>activate()</code></p>

<p>Sets this instance to <code>Run.instance</code>, the active <code>Run</code> instance. All jig instantiations, updates, and class deployments will occur on the active run instance. The owner of this instance will sign transactions and its blockchain and purse are the ones which will be used. <code>activate()</code> will also assign <code>bsv.Networks.defaultNetwork</code> to be the active Run&#39;s network configuration. </p>
<h3 id='api-reference-run-deploy-code'>deploy(code)</h3>
<blockquote>
<p>Upload a BigInteger class to the blockchain</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">BigInteger</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nx">run</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">BigInteger</span><span class="p">)</span>

<span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">sync</span><span class="p">()</span>
</code></pre>
<p><code>deploy(T: function): Code</code></p>

<p>Uploads code to the blockchain. Once deployment completes, the class or function will be assigned a <code>location</code> so that it may be downloaded later. It will also be assigned an <code>origin</code> and <code>owner</code>. <code>deploy</code> also sandboxes the class or function and returns it as <a href="#api-reference-code">Code</a> with special <code>Code</code> methods. Code uploaded does not necessarily need to be a Jig class â€” any class or function will work.</p>
<h3 id='api-reference-run-import-rawtx-options'>import(rawtx, options)</h3>
<blockquote>
<p>Import a Run transaction to update it</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="nx">rawtx</span><span class="p">)</span>

<span class="nx">tx</span><span class="p">.</span><span class="nx">update</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">run</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">AnotherClass</span><span class="p">))</span>

<span class="kr">const</span> <span class="nx">updated</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">tx</span><span class="p">.</span><span class="kr">export</span><span class="p">()</span>
</code></pre>
<p><code>import(rawtx: string, options: ?object): Promise&lt;Transaction&gt;</code></p>

<p>Imports a Bitcoin transaction into a <a href="#api-reference-transaction">Run.Transaction</a> object that can be updated.</p>
<h4 id='api-reference-run-import-rawtx-options-options'>Options</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><code>trust</code></td>
<td>boolean</td>
<td>Whether to automatically trust the transaction being imported</td>
<td>false</td>
</tr>
</tbody></table>
<h3 id='api-reference-run-load-location-options'>load(location, options)</h3>
<blockquote>
<p>Load a particular jig</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">ticketLocation</span> <span class="o">=</span> <span class="s1">'afc557ef2970af0b5fb8bc1a70a320af425c7a45ca5d40eac78475109563c5f8_o1'</span>
<span class="kr">const</span> <span class="nx">ticket</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">ticketLocation</span><span class="p">)</span>
</code></pre>
<blockquote>
<p>Load a code creation</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">classLocation</span> <span class="o">=</span> <span class="s1">'e4a9618d3a187448feeb95ff30f7ec6381a025316cdcae2cdf388ad3de7fab6f_o2'</span>
<span class="kr">const</span> <span class="nx">MyClass</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">classLocation</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyClass</span><span class="p">()</span>
</code></pre>
<p><code>load(location: string, options: ?object): Promise&lt;Creation&gt;</code></p>

<p>Universal load method to load any creation including jigs objects, jig classes, sidekick code, berries, and more. You pass in an on-chain <code>location</code>. The <code>location</code> is generally a transaction id and output index pair. This string should usually be the jig&#39;s or class&#39;s last known <code>location</code> property. However, it is also possible to load jigs at any state in the past using other <code>location</code>s, although these will be read-only. Downloaded code will be safely sandboxed before being returned.</p>
<h4 id='api-reference-run-load-location-options-options'>Options</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><code>trust</code></td>
<td>boolean</td>
<td>Whether to automatically trust the transaction being imported</td>
<td>false</td>
</tr>
</tbody></table>
<h3 id='api-reference-run-sync'>sync()</h3>
<blockquote>
<p>Wait for all jigs to deploy and classes to upload before continuing</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">MyClass</span> <span class="p">{</span> <span class="p">}</span>
<span class="nx">run</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">MyClass</span><span class="p">)</span>

<span class="kr">class</span> <span class="nx">MyObject</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span> <span class="p">}</span>
<span class="kr">const</span> <span class="nx">jig</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyObject</span><span class="p">()</span>

<span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">sync</span><span class="p">()</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'jig origin'</span><span class="p">,</span> <span class="nx">jig</span><span class="p">.</span><span class="nx">origin</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'class origin'</span><span class="p">,</span> <span class="nx">MyClass</span><span class="p">.</span><span class="nx">origin</span><span class="p">)</span>
</code></pre>
<p><code>sync(): Promise&lt;void&gt;</code></p>

<p>Returns a promise that completes when all pending transactions are published. After this completes, all jigs and classes will be assigned <code>location</code>s. Note: This method will not update the inventory with newly received UTXOs. For that, call <code>run.inventory.sync()</code>.</p>

<aside class="notice">
<b>Note:</b> If a pending transaction fails to publish, that transaction and all subsequent transactions are reverted and the sync throws an error.
</aside>
<h3 id='api-reference-run-transaction-f'>transaction(f)</h3>
<blockquote>
<p>Send two tokens and deploy a class all in the same transaction</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">token1</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span>
  <span class="nx">token2</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span>
  <span class="nx">run</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">Trophy</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>
<p><code>transaction(f: function): any</code></p>

<p>Shorthand for creating a new transaction, calling update with the function passed, and then calling publish.</p>
<h3 id='api-reference-run-trust-txid'>trust(txid)</h3>
<blockquote>
<p>Trust a third-party transaction before loading its code</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">codeTxId</span> <span class="o">=</span> <span class="nx">codeLocation</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
<span class="nx">run</span><span class="p">.</span><span class="nx">trust</span><span class="p">(</span><span class="nx">codeTxId</span><span class="p">)</span>

<span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">codeLocation</span><span class="p">)</span>
</code></pre>
<p><code>trust(txid: string)</code></p>

<p>Adds a transaction to the trusted set. By default, code that is not in the trusted set cannot be loaded.</p>
<h3 id='api-reference-run-app'>app</h3>
<p><code>app: string</code></p>

<p>An application ID to distinguish Run transactions. Application developers may wish to set this in <code>Run</code>&#39;s constructor in order to find their specific transactions in third-party tools and analytics, like <a href="https://trends.cash">trends.cash</a> or <a href="https://www.whatsonchain.com">WhatsOnChain</a>. This string will be UTF-8 encoded and stored in the 5th chunk of the <code>op_return</code> script. For more details about the protocol, see <a href="#how-it-works">How It Works</a>.</p>

<aside class="warning">
<b>Warning:</b> Anyone may set the <code>app</code> string to any value, including yours, so <code>app</code> is not a secure way to identify your app's transactions.
</aside>
<h3 id='api-reference-run-blockchain'>blockchain</h3>
<blockquote>
<p>Download a transaction from the blockchain</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">txid</span> <span class="o">=</span> <span class="s1">'afc557ef2970af0b5fb8bc1a70a320af425c7a45ca5d40eac78475109563c5f8'</span>
<span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">blockchain</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">txid</span><span class="p">)</span>
</code></pre>
<p><code>blockchain: Blockchain</code></p>

<p>Blockchain API to access the bitcoin network. See the <a href="#api-reference-apis-blockchain">Blockchain</a> API. You may change the blockchain anytime.</p>
<h3 id='api-reference-run-cache'>cache</h3>
<p><code>cache: Cache</code></p>

<p>Cache API used to save and load existing state. You may change the cache anytime.</p>
<h3 id='api-reference-run-inventory'>inventory</h3>
<p><code>inventory: Inventory</code></p>

<p><a href="#api-reference-plugins-inventory">Inventory</a> that tracks creations owned by the current owner. This is reset whenever the Run <code>owner</code> changes.</p>
<h3 id='api-reference-run-logger'>logger</h3>
<p><code>logger: Logger</code></p>

<p><a href="#api-reference-apis-logger">Logger</a> implementation that prints out Run information. You may change the logger anytime.</p>
<h3 id='api-reference-run-owner'>owner</h3>
<p><code>owner: Owner</code></p>

<p>The owner object used to update jigs and approve transactions. See the <a href="#api-reference-apis-owner">Owner</a> API. You may change the owner anytime.</p>
<h3 id='api-reference-run-purse'>purse</h3>
<p><code>purse: Purse</code></p>

<p>The purse used to pay for transactions. You may change the purse anytime.</p>
<h3 id='api-reference-run-timeout'>timeout</h3>
<p><code>timeout: number</code></p>

<p>Timeout for all Run actions in milliseconds. This applies to <code>load()</code>, <code>sync()</code>, <code>import()</code> and the inventory&#39;s <code>sync()</code>. If set to Infinity, then there is no timeout.</p>
<h3 id='api-reference-run-static-jig'>static Jig</h3>
<blockquote>
<p>Create a custom jig that extends the Jig base class</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">MyObject</span> <span class="kr">extends</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">Jig</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre>
<p><code>static Jig: Jig</code></p>

<p><code>Jig</code> class that is common for all <code>Run</code> instances. It is set as <code>Jig</code> at the global scope. You must extend from this base class to create a jig. See <a href="#api-reference-jig">Jig</a>.</p>
<h3 id='api-reference-run-static-code'>static Code</h3>
<p><code>static Code: Code</code></p>

<p><code>Code</code> base class that all deployed classes or functions inherit from. See <a href="#api-reference-code">Code</a>.</p>
<h3 id='api-reference-run-static-berry'>static Berry</h3>
<p><code>static Berry: Berry</code></p>

<p><code>Berry</code> base class that defines a method for loading third-party data and its structure. See <a href="#api-reference-berry">Berry</a>.</p>
<h3 id='api-reference-run-static-creation'>static Creation</h3>
<p><code>static Creation: Creation</code></p>

<p><code>Creation</code> base class that jigs, code, and berries all share. See <a href="#api-reference-creation">Creation</a>.</p>
<h3 id='api-reference-run-static-transaction'>static Transaction</h3>
<p><code>static Transaction: Transaction</code></p>

<p><code>Transaction</code> class used to manually create, update, and inspect Run transactions. See <a href="#api-reference-transaction">Transaction</a>.</p>
<h3 id='api-reference-run-static-plugins'>static plugins</h3>
<p><code>static plugins: object</code></p>

<p>Contains the plugins that ship with Run and may be used to configure Run. See <a href="#api-reference-plugins">Plugins</a></p>
<h3 id='api-reference-run-static-extra'>static extra</h3>
<p><code>static extra: object</code></p>

<p>Contains the standard library of code jigs that ship with Run. See <a href="#api-reference-extras">Extras</a>.</p>
<h3 id='api-reference-run-static-api'>static api</h3>
<p><code>static api: object</code></p>

<p>An object that contains all plugin APIs that a user may implement. See <a href="#api-reference-apis">APIs</a>.</p>
<h3 id='api-reference-run-static-util'>static util</h3>
<p><code>static util: object</code></p>

<p>Various utility functions and classes. See <a href="#api-reference-util">Util</a></p>
<h3 id='api-reference-run-static-configure-env-network'>static configure(env, network)</h3>
<blockquote>
<p>Configure Run from the command line</p>
</blockquote>
<pre class="highlight plaintext"><code>Run.configure(process.env)
</code></pre>
<p><code>static configure(env: object, network: ?string)</code></p>

<p>Configures Run&#39;s defaults with the provided environment object. This is typically <code>process.env</code>. This provides an easy way for apps to setup Run from the shell. When <code>Run</code> is instantiated, it will use these settings as defaults.</p>

<p>The network parameter is optional. If specified, it overrides the value in the environment variables. Run will pick the <code>PURSE</code> and <code>OWNER</code> keys for that specific network.</p>
<h4 id='api-reference-run-static-configure-env-network-environment-variables'>Environment variables</h4>
<table><thead>
<tr>
<th>Name</th>
<th>Description</th>
<th>Possible Values</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><strong>APP</strong></td>
<td>App string provided to Run</td>
<td>your app string</td>
<td><code>&#39;&#39;</code></td>
</tr>
<tr>
<td><strong>LOGGER</strong></td>
<td>Whether to log internal messages to the console</td>
<td><code>true</code>, <code>false</code>, <code>debug</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td><strong>NETWORK</strong></td>
<td>Network string</td>
<td><code>mock</code>, <code>main</code>, <code>test</code>, <code>stn</code></td>
<td><code>mock</code></td>
</tr>
<tr>
<td><strong>PURSE</strong></td>
<td>Purse key used</td>
<td>your string privkey</td>
<td><code>undefined</code></td>
</tr>
<tr>
<td><strong>PURSE_[network]</strong></td>
<td>Purse key used on a specific network</td>
<td>your string privkey</td>
<td><code>undefined</code></td>
</tr>
<tr>
<td><strong>OWNER</strong></td>
<td>Owner key used</td>
<td>your string privkey</td>
<td><code>undefined</code></td>
</tr>
<tr>
<td><strong>OWNER_[network]</strong></td>
<td>Owner key used on a specific network</td>
<td>your string privkey</td>
<td><code>undefined</code></td>
</tr>
<tr>
<td><strong>API</strong></td>
<td>Blockchain API when using mainnet or testnet</td>
<td><code>run</code>, <code>mattercloud</code>, <code>whatsonchain</code></td>
<td><code>run</code></td>
</tr>
<tr>
<td><strong>APIKEY</strong></td>
<td>API key for the blockchain API</td>
<td>your string api key</td>
<td><code>undefined</code></td>
</tr>
<tr>
<td><strong>APIKEY_[api]</strong></td>
<td>API key used with a specific API</td>
<td>your string api key</td>
<td><code>undefined</code></td>
</tr>
</tbody></table>
<h3 id='api-reference-run-static-protocol'>static protocol</h3>
<p><code>static version: number</code></p>

<p>The version number of the Run protocol. Jigs that you deploy will be tied to a particular protocol. Jigs and other creations deployed using protocol v5 and above and guaranteed to be supported in the future.</p>
<h3 id='api-reference-run-static-version'>static version</h3>
<p><code>static version: string</code></p>

<p>Semantic version of the Run library.</p>
<h3 id='api-reference-run-static-instance'>static instance</h3>
<p><code>static instance: Run</code></p>

<p>The currently active <code>Run</code> instance. All jig instantiations, updates, and class deployments will occur on the active run instance. The owner of that instance will sign transactions and its blockchain and purse are the ones which will be used. You may change the active Run instance either by calling <code>run.activate()</code> or by creating a new <code>Run</code> instance.</p>
<h2 id='api-reference-jig'>Jig</h2>
<p><code>class Jig extends Creation { ... }</code></p>

<p>Base class for objects and code that can be <em>owned</em> on the blockchain and <em>updated</em> by calling methods. Jigs have various internal rules that ensure they are able to be safely composed together and called from each other. All classes that extend from <code>Jig</code> are themselves jigs as well as Code. Jigs are also <a href="#api-reference-creation">Creation</a>s and have <code>location</code>, <code>origin</code>, and <code>nonce</code> properties.</p>
<h3 id='api-reference-jig-init'>init()</h3>
<blockquote>
<p>Simple jig that takes two parameters in its constructor</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">SimpleStore</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SimpleStore</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span> <span class="c1">// prints 2</span>
</code></pre>
<p><code>init()</code></p>

<p>The initialization method for jig objects. <code>init()</code> is to jigs as <code>constructor()</code> is to normal classes. Run will call init automatically when the class is instantiated, just like constructors, and <code>init()</code> cannot be called directly by users. You may pass parameters into <code>init()</code> and also call <code>super.init()</code> to call its parent initializer.</p>

<aside class="notice">
<b>Note:</b> Jigs are not allowed to have a <code>constructor()</code> method for security reasons. <code>init()</code> is used instead.
</aside>
<h3 id='api-reference-jig-sync-options'>sync(options)</h3>
<p><code>sync(options: ?object): Promise&lt;Jig&gt;</code></p>

<p>Synchronizes the jig object with the blockchain. If there are any pending transactions for this jig to publish, this method will wait for them to broadcast. If there are no pending transactions, then this method will update the jig and any internally-referenced jigs to their latest states on the blockchain.</p>

<p>This method supports two options: <code>forward</code> and <code>inner</code>. If you pass <code>{ forward: false }</code>, then only pending transactions will be published and new updates will not be downloaded. This may be useful for performance reasons or if the Blockchain API does not support forward syncing, as is the case with WhatsOnChain. If you pass <code>{ inner: false }</code>, then only the current jig will be updated and any internally-referenced creations will not be explicitly updated.</p>
<h4 id='api-reference-jig-sync-options-options'>Options</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><code>forward</code></td>
<td>Whether to sync the jig forward to its latest on-chain state</td>
<td>undefined</td>
</tr>
<tr>
<td><code>inner</code></td>
<td>Whether to also sync any referenced creations</td>
<td>undefined</td>
</tr>
</tbody></table>
<h3 id='api-reference-jig-destroy'>destroy()</h3>
<p><code>destroy(): Jig</code></p>

<p>Destroys the jig. The destroyed jig will acquire a final location that ends with <code>_dN</code>, where N is the index of the destroyed jig in its final transaction. This location is uniquely identifiable and the jig may still be referenced. However, it can no longer be updated. You may override the <code>destroy()</code> method to perform custom destroy behavior.</p>
<h3 id='api-reference-jig-auth'>auth()</h3>
<p><code>auth(): Jig</code></p>

<p>Proves ownership over the current jig by spending its output in a transaction. You may override the <code>auth()</code> method.</p>
<h3 id='api-reference-jig-static-load-location'>static load(location)</h3>
<blockquote>
<p>Load a jig</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">Message</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="s1">'4e146ac161324ef0b388798462867c29ad681ef4624ea4e3f7c775561af3ddd0_o1'</span><span class="p">)</span>
</code></pre>
<p><code>static load(location: string): Promise&lt;Berry&gt;</code></p>

<p>Loads a jig object that is an instance of the particular jig class. This is an alternative to <code>run.load()</code> for when you know the type of jig to load. This method is accessible when loading berries unlike <code>run.load()</code>.</p>
<h2 id='api-reference-code'>Code</h2>
<p><code>class Code extends Creation { ... }</code></p>

<p><code>Code</code> is the base class for classes and functions deployed on-chain. Unlike <code>Jig</code> however, you do not need to extend from Code yourself. When you call <code>run.deploy</code> on a class or function, the returned sandboxed code is a <code>Code</code> instance that gets all the functions and properties below. This lets you to upgrade, send and destroy code just like object jigs! All code are also <a href="#api-reference-creation">Creation</a>s and have <code>location</code>, <code>origin</code>, and <code>nonce</code> properties.</p>

<p>There are two kinds of <code>Code</code>: jig code and sidekick code. Jig code are classes that extend from <code>Jig</code> and behave just like jig objects, meaning their methods are protected and static function calls can update their state. Sidekick code are functions or classes that do not extend from Jig, and cannot be updated in that way over time. Sidekick code has no special rules unlike jigs and so is better suited for helper code. The Code base class is available via <code>Run.Code</code>. Both jig code and sidekick code however may be upgraded, destroyed, and signed.</p>
<h3 id='api-reference-code-sync-options'>sync(options)</h3>
<p><code>sync(options: ?object): Promise&lt;Code&gt;</code></p>

<p>Synchronizes code with the blockchain. If there are any pending transactions to publish, this method will wait for them to broadcast. If there are no pending transactions, then this method will update the code and any internally-referenced creations to their latest states on the blockchain.</p>

<p>This method supports two options: <code>forward</code> and <code>inner</code>. If you pass <code>{ forward: false }</code>, then only pending transactions will be published and new updates will not be downloaded. This may be useful for performance reasons or if the Blockchain API does not support forward syncing, as is the case with WhatsOnChain. If you pass <code>{ inner: false }</code>, then only the current jig will be updated and any internally-referenced creations will not be explicitily updated.</p>
<h4 id='api-reference-code-sync-options-options'>Options</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><code>forward</code></td>
<td>Whether to sync the code forward to its latest on-chain state</td>
<td>undefined</td>
</tr>
<tr>
<td><code>inner</code></td>
<td>Whether to also sync any referenced creations</td>
<td>undefined</td>
</tr>
</tbody></table>
<h3 id='api-reference-code-destroy'>destroy()</h3>
<blockquote>
<p>Destroy a token class during deploy to stop future mints</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">GiftCard</span> <span class="kr">extends</span> <span class="nx">Token</span> <span class="p">{</span> <span class="p">}</span>

<span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">GiftCard</span><span class="p">.</span><span class="nx">mint</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
  <span class="nx">GiftCard</span><span class="p">.</span><span class="nx">destroy</span><span class="p">()</span>
<span class="p">})</span>
</code></pre>
<p><code>destroy(): Code</code></p>

<p>Destroys the code so that it cannot be updated in the future. The destroyed code will acquire a final location that ends with <code>_dN</code>, where N is the index of the destroyed code in its final transaction. This location is uniquely identifiable and the code may still be referenced and instantiated. However, it may no longer be updated.</p>
<h3 id='api-reference-code-auth'>auth()</h3>
<blockquote>
<p>Enforce that only the owner of a jig class may create instances</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Coin</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">Coin</span><span class="p">.</span><span class="nx">auth</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p><code>auth(): Code</code></p>

<p>Proves ownership over the current code by spending its output in a transaction.</p>
<h3 id='api-reference-code-upgrade-t'>upgrade(T)</h3>
<blockquote>
<p>Upgrade a jig class to add a new method</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">DragonCode</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">classLocation</span><span class="p">)</span>

<span class="kr">class</span> <span class="nx">Dragon</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">setName</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="p">}</span>
  <span class="nx">setAge</span><span class="p">(</span><span class="nx">age</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span> <span class="p">}</span>
<span class="p">}</span>

<span class="nx">DragonCode</span><span class="p">.</span><span class="nx">upgrade</span><span class="p">(</span><span class="nx">Dragon</span><span class="p">)</span>

<span class="nx">await</span> <span class="nx">DragonCode</span><span class="p">.</span><span class="nx">sync</span><span class="p">()</span>
</code></pre>
<p><code>upgrade(T: function)</code></p>

<p>Replaces the code with new behavior. With great power comes great responsibility. This method can completely change the behavior not just of the class but of any instances. It is best to use this feature to make bug fixes but not major changes. Once you are confident in the security of the code, you can set the <code>upgradable</code> property to false to prevent further upgrades. Jig objects, as instances of jig code, will be automatically upgraded to the new behavior when they call <code>sync()</code> and their class reference gets upgraded.</p>
<h3 id='api-reference-code-deps'>deps</h3>
<p><code>static deps: ?object</code></p>

<p>The dependencies of this code. These must be manually specified in order for Run to load them into the code sandbox. And properties on deps are added as globals within the sandbox.</p>
<h3 id='api-reference-code-sealed'>sealed</h3>
<p><code>sealed: true | false | &#39;owner&#39;</code></p>

<p>The <code>sealed</code> property defines the rules for how a class can be extended. If <code>true</code>, then no extensions are allowed. If <code>false</code>, then anyone may extend from the class. If <code>&#39;owner&#39;</code>, then the class&#39;s owner must authorize of any extensions to the class. The default value is <code>&#39;owner&#39;</code> so that a class hierarchy can be trusted and the <code>instanceof</code> keyword is safe by default.</p>
<h3 id='api-reference-code-upgradable'>upgradable</h3>
<p><code>upgradable: boolean</code></p>

<p>Whether the code is allowed to be upgraded. You may wish to set this value to false to prove that the behavior will not change. The default value is true.</p>
<h2 id='api-reference-berry'>Berry</h2>
<blockquote>
<p>Define a berry class</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">TwetchPost</span> <span class="kr">extends</span> <span class="nx">Berry</span> <span class="p">{</span>
    <span class="nx">init</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="nx">text</span>
    <span class="p">}</span>

    <span class="kr">static</span> <span class="nx">async</span> <span class="nx">pluck</span><span class="p">(</span><span class="nx">location</span><span class="p">,</span> <span class="nx">fetch</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">txo</span><span class="p">(</span><span class="nx">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">location</span><span class="p">))</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">out</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">s2</span> <span class="o">===</span> <span class="s1">'19HxigV4QyBv3tHpQVcUEQyq1pzZVdoAut'</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// B protocol</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">TwetchPost</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">out</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">s3</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">TwetchPost</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">txo</span> <span class="p">}</span>
</code></pre>
<p><code>class Berry extends Creation { ... }</code></p>

<p><code>Berry</code> is a base class for defining how data from third-party protocols should be loaded. Each class that extends from Berry defines a type of data. Berry instances, or simply berries, are read-only objects that represent this parsed data. Once loaded, but they may be used within jigs. All berries are also <a href="#api-reference-creation">Creation</a>s and have <code>location</code>, <code>origin</code>, and <code>nonce</code> properties.</p>
<h3 id='api-reference-berry-init'>init()</h3>
<p><code>init()</code></p>

<p>The initialization method for berry instances. You may pass parameters into <code>init()</code> and use those parameters to setup the berry. The <code>pluck()</code> method must create a new instance of the berry which will call <code>init()</code>.</p>
<h3 id='api-reference-berry-static-pluck-path-fetch'>static pluck(path, fetch)</h3>
<p><code>pluck(path: string, fetch: function): Promise&lt;Berry&gt;</code></p>

<p>Plucks a berry from the blockchain. You will override this method to load a berry instance. The berry class should fetch the transaction using <code>async fetch()</code>. This will return a raw transaction in hex format. The Berry should parse the transaction, perhaps using <a href="#api-reference-extras-tx">Tx</a> or <a href="#api-reference-extras-txo">txo</a>, and then instantiate a new Berry of the appropriate type with the data parsed out. If additional berries are required to build this one, they may be plucked recursively using <code>Berry.load()</code>.</p>
<h3 id='api-reference-berry-static-load-path'>static load(path)</h3>
<blockquote>
<p>Load a berry</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">post</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">TwetchPost</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="s1">'4e146ac161324ef0b388798462867c29ad681ef4624ea4e3f7c775561af3ddd0'</span><span class="p">)</span>
</code></pre>
<p><code>static load(path: string): Promise&lt;Berry&gt;</code></p>

<p>Loads a berry of a particular type. Run internally calls the berry class&#39;s <code>pluck()</code> method to load the berry. <code>load()</code> may be also called recursively inside of <code>Berry.pluck()</code> to load sub-berries. You cannot override <code>load()</code>.</p>
<h2 id='api-reference-creation'>Creation</h2>
<blockquote>
<p>Check that objects are indeed creations</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="nx">Token2</span> <span class="k">instanceof</span> <span class="nx">Creation</span>
<span class="c1">// true</span>

<span class="k">new</span> <span class="nx">Dragon</span><span class="p">()</span> <span class="k">instanceof</span> <span class="nx">Creation</span>
<span class="c1">// true</span>

<span class="nx">twetchPostBerry</span> <span class="k">instanceof</span> <span class="nx">Creation</span>
<span class="c1">// true</span>
</code></pre>
<p><code>class Creation { ... }</code></p>

<p>A JavaScript object that Run can be loaded from the blockchain. This includes jigs, code, and berries. The <code>Creation</code> class, available via <code>Run.Creation</code> is the effective base class for all creations. All creations have the location bindings <code>location</code>, <code>origin</code>, and <code>nonce</code> as well as UTXO bindings <code>owner</code> and <code>satoshis</code>. They can be passed into jig functions and referenced as properties. To load a creation, call <code>run.load</code> with its corresponding location.</p>
<h3 id='api-reference-creation-origin'>origin</h3>
<blockquote>
<p>Two different tickets have different origins</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Ticket</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span> <span class="p">}</span>
<span class="kr">const</span> <span class="nx">ticket1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ticket</span><span class="p">()</span>
<span class="kr">const</span> <span class="nx">ticket2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ticket</span><span class="p">()</span>
<span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">inventory</span><span class="p">.</span><span class="nx">sync</span><span class="p">()</span>
<span class="c1">// ticket1.origin !== ticket2.origin</span>
</code></pre>
<p><code>origin: string</code></p>

<p>The unique blockchain location where the creation was initially deployed or loaded that distinguishes it from all other creations. The format for <code>origin</code> is generally <code>TXID_oN</code> where <code>TXID</code> is the bitcoin transaction ID where the creation was first deployed. <code>o</code> is shorthand for <em>output</em> and <code>N</code> is the zero-based index representing this creation. Deleted creations, instead of ending in <code>_oN</code>, end in <code>_odN</code> instead. Berries have additional query parameters in their origin. In any case, the origin is set automatically by Run after deploying or loading the creation and it becomes read-only thereafter. Jig methods may internally read the origin anytime after it is initially published.</p>
<h3 id='api-reference-creation-location'>location</h3>
<blockquote>
<p>The value of <code>location</code> changes with every update</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Weapon</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">upgrade</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">upgraded</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="k">return</span> <span class="k">this</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kr">const</span> <span class="nx">weapon</span> <span class="o">=</span> <span class="nx">await</span> <span class="k">new</span> <span class="nx">Weapon</span><span class="p">().</span><span class="nx">sync</span><span class="p">()</span>
<span class="c1">// weapon.origin === weapon.location</span>
<span class="nx">await</span> <span class="nx">weapon</span><span class="p">.</span><span class="nx">uprade</span><span class="p">().</span><span class="nx">sync</span><span class="p">()</span>
<span class="c1">// weapon.origin !== weapon.location</span>
</code></pre>
<p><code>location: string</code></p>

<p>The blockchain location that uniquely identifies the current state of the creation. This is in the same form as <code>origin</code>. However, unlike <code>origin</code>, <code>location</code> will update with every state change on the creation. When there is a pending change, reading <code>location</code> will throw an error. This is because the Bitcoin transaction ID is not yet known so its location is undetermined. To avoid this error, be sure to call <code>sync</code> before reading the location. Finally, note that location, like origin, is a read-only property that Run updates for you.</p>
<h3 id='api-reference-creation-nonce'>nonce</h3>
<p><code>nonce: number</code></p>

<p>The number of transactions this creation was updated in. This may be used to determine if one creation state is newer than another. Like <code>origin</code> and <code>location</code>, this is a read-only property that Run updates for you.</p>
<h3 id='api-reference-creation-owner'>owner</h3>
<blockquote>
<p>Transferring ownership of a code jig</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">FrequentFlyerRewards</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="kr">static</span> <span class="nx">transfer</span><span class="p">(</span><span class="nx">to</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">owner</span> <span class="o">=</span> <span class="nx">to</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">run</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">FrequentFlyerRewards</span><span class="p">).</span><span class="nx">transfer</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span>
</code></pre>
<p><code>owner: string|Lock</code></p>

<p>The owner is either a Bitcoin address string, a public key in hex, or a custom <a href="#api-reference-apis-lock">Lock</a> that creates an output script. A jig may change this property to change owners, but it is read-only from outside the creation.</p>
<h3 id='api-reference-creation-satoshis'>satoshis</h3>
<blockquote>
<p>Backing a jig with Bitcoin</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Item</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">satoshis</span> <span class="o">=</span> <span class="mi">10000</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p><code>satoshis: number</code></p>

<p>This number represents the amount of Bitcoin in satoshis that are backing this creation. It may be increased or decreased but it may not be set below zero. Increasing this value will deposit Bitcoin into the output for the jig from the Run purse. Decreasing it will withdraw Bitcoin to the Run purse.</p>
<h2 id='api-reference-transaction'>Transaction</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Store</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Store</span><span class="p">()</span>

<span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">()</span>

<span class="nx">tx</span><span class="p">.</span><span class="nx">update</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">store</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'Hello, world'</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">await</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">publish</span><span class="p">()</span>
</code></pre>
<p><code>class Transaction { ... }</code></p>

<p>The Transaction class gives you to finer control over the current Bitcoin transaction being built by Run. This class is available via <code>Run.Transaction</code>. It allows you to:</p>

<ul>
<li>Batch many jig updates together</li>
<li>Load and inspect transactions</li>
<li>Export transactions for others to co-sign</li>
<li>Sign transactions involving your jigs</li>
<li>Propose atomic swaps and other updates that involve multiple parties</li>
</ul>

<p>Normally, when you update a jig that you own, Run will begin a transaction for you automatically. However, you can take control of this process by creating a new <code>Transaction</code> and calling <code>update()</code> on the transaction to perform the update yourself. When you are finished, you can call <code>publish()</code> to broadcast the transaction to the blockchain or <code>export()</code> to save the transaction locally. Alternatively, you may cancel the updates by calling <code>rollback</code>. Other parties may load your exported transaction by calling <code>run.import</code> and then inspecting its contents using <code>outputs</code> and <code>deletes</code> arrays. If they approve of the updates to their jigs, they may call <code>sign</code> and then <code>publish</code> to broadcast the transaction.</p>
<h3 id='api-reference-transaction-update-callback'>update(callback)</h3>
<blockquote>
<p>Deploy multiple jig classes in a single transaction</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">()</span>
<span class="nx">tx</span><span class="p">.</span><span class="nx">update</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">run</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">Picasso</span><span class="p">))</span>
<span class="nx">tx</span><span class="p">.</span><span class="nx">update</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">run</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">Monet</span><span class="p">))</span>
<span class="nx">tx</span><span class="p">.</span><span class="nx">update</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">run</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">VanGogh</span><span class="p">))</span>
<span class="nx">await</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">publish</span><span class="p">()</span>
</code></pre>
<p><code>update(callback: function)</code></p>

<p>Adds additional updates to the transaction. This may include calling a jig method, deploying code, upgrading code, destroying jigs, and more. The callback function passed in will be called to record the new changes.</p>
<h3 id='api-reference-transaction-publish-options'>publish(options)</h3>
<p><code>publish(options: ?object): Promise&lt;void&gt;</code></p>

<p>Finalizes the transaction and publishes it to the blockchain.</p>
<h4 id='api-reference-transaction-publish-options-options'>Options</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>pay</td>
<td>Whether to pay for the transaction</td>
<td>true</td>
</tr>
<tr>
<td>sign</td>
<td>Whether to sign the transaction</td>
<td>true</td>
</tr>
</tbody></table>

<aside class="notice">
<b>Note:</b> If the transaction fails to post, then all updates in the batch are reverted.
</aside>
<h3 id='api-reference-transaction-export-options'>export(options)</h3>
<p><code>export(options: ?object): Promise&lt;string&gt;</code></p>

<p>Exports the in-progress transaction as a raw hex string. This transaction may be imported or broadcast afterward.</p>
<h4 id='api-reference-transaction-export-options-options'>Options</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>pay</td>
<td>Whether to pay for the transaction</td>
<td>true</td>
</tr>
<tr>
<td>sign</td>
<td>Whether to sign the transaction</td>
<td>true</td>
</tr>
</tbody></table>
<h3 id='api-reference-transaction-pay'>pay()</h3>
<p><code>pay(): Promise&lt;void&gt;</code></p>

<p>Pays for the current transaction. This is performed automatically when <code>publish()</code> or <code>export()</code> is called, but you may wish to call it manually if you are paying with multiple purses or co-signing the transaction with others. If any additional updates are made to the transaction, including calling jig methods or deploying new code, then the transaction must be paid for again.</p>
<h3 id='api-reference-transaction-sign'>sign()</h3>
<p><code>sign(): Promise&lt;void&gt;</code></p>

<p>Signs all inputs involved in the current transaction using the active <code>Run</code> owner. The transaction should only be signed after all updates are added and the transaction has been paid for via <code>pay()</code>. After all required signatures are added, then the transaction may be broadcasted, and if the transaction requires signatures from multiple different owners, then it must be exported and imported by other parties to be signed. If any additional updates are made to the transaction, including calling jig methods or deploying new code, then the signatures are reset and the transaction must be paid for again and re-signed by all parties.</p>
<h3 id='api-reference-transaction-rollback'>rollback()</h3><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Store</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">set</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Store</span><span class="p">()</span>

<span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">()</span>

<span class="nx">tx</span><span class="p">.</span><span class="nx">update</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">store</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'Hello, world'</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">tx</span><span class="p">.</span><span class="nx">rollback</span><span class="p">()</span>

<span class="c1">// store.value is undefined again</span>
</code></pre>
<p><code>rollback()</code></p>

<p>Abandons the current transaction and reverts all changes to jigs and code. Any classes to be deployed will have their origins and locations cleared, and any jigs to be updated will revert to their prior state. Any jigs that are deployed for their first time will be reverted to an invalid state where they may no longer be used. </p>
<h3 id='api-reference-transaction-outputs'>outputs</h3>
<p><code>outputs: Array&lt;Creation&gt;</code></p>

<p>Jigs or code outputted from the transaction in their end state.</p>
<h3 id='api-reference-transaction-deletes'>deletes</h3>
<p><code>deletes: Array&lt;Creation&gt;</code></p>

<p>Jigs or code deleted within the transaction in their end state.</p>
<h2 id='api-reference-plugins'>Plugins</h2>
<p>This description describes various classes that ship with the Run library that may be used to manually configure Run. Each plugin is available under <code>Run.plugins</code>.</p>
<h3 id='api-reference-plugins-runconnect'>RunConnect</h3>
<blockquote>
<p>Connect to Run Connect Blockchain API</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">blockchain</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">RunConnect</span><span class="p">()</span>

<span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="nx">blockchain</span> <span class="p">})</span>
</code></pre>
<p><code>class RunConnect implements Blockchain { ... }</code></p>

<p>A <a href="#api-reference-apis-blockchain">Blockchain</a> implementation that connects to the Run Blockchain Server.</p>

<p><code>RunConnect</code> may be accessed via <code>Run.plugins.RunConnect</code>.</p>
<h4 id='api-reference-plugins-runconnect-constructor-options'>constructor(options)</h4>
<p><code>constructor(options: object): RunConnect</code></p>

<p>Creates a <code>RunConnect</code> instance with the provided configuration.</p>
<h5 id='api-reference-plugins-runconnect-constructor-options-options'>Options</h5>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><code>network</code></td>
<td>string</td>
<td>Either main or test</td>
<td>main</td>
</tr>
</tbody></table>
<h3 id='api-reference-plugins-browsercache'>BrowserCache</h3>
<blockquote>
<p>Create a BrowserCache with a higher in-memory cache size</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="p">{</span> <span class="nx">BrowserCache</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">plugins</span>

<span class="kr">const</span> <span class="nx">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BrowserCache</span><span class="p">({</span> <span class="na">maxMemorySizeMB</span><span class="p">:</span> <span class="mi">100</span> <span class="p">})</span>

<span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="nx">cache</span> <span class="p">})</span>
</code></pre>
<p><code>class BrowserCache implements Cache { ... }</code></p>

<p>A multi-level <a href="#api-reference-apis-cache">Cache</a> implementation designed for web browsers that persists values across sessions.</p>

<p><code>BrowserCache</code> is the default implementation of the <code>Cache</code> API setup by Run when using browsers. <code>BrowserCache</code> is a wrapper around the <code>LocalCache</code> and an IndexedDB store. It uses the <code>LocalCache</code> to quickly store and access values from local memory and the IndexedDb store to persist values across browser sessions. When a value is written, it is written both to the <code>LocalCache</code> and to the IndexedDB store. </p>

<p><code>BrowserCache</code> may be accessed via <code>Run.plugins.BrowserCache</code>.</p>

<aside class="warning">
<b>Warning:</b> The IndexedDB store used internally may be flushed by the browser once its size reaches a maximum size determined by the browser. The <code>BrowserCache</code> does not attempt to manage this itself.
</aside>
<h4 id='api-reference-plugins-browsercache-constructor-options'>constructor(options)</h4>
<p><code>constructor(options: ?object)</code></p>

<p>Creates the browser cache. The options object may be used to configure the cache.</p>
<h5 id='api-reference-plugins-browsercache-constructor-options-options'>Options</h5>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><code>maxMemorySizeMB</code></td>
<td>number</td>
<td>Max size in megabytes (MB) of the cached data stored in memory</td>
<td>10 (10MB)</td>
</tr>
<tr>
<td><code>dbName</code></td>
<td>string</td>
<td>Database name</td>
<td>&#39;run-browser-cache&#39;</td>
</tr>
<tr>
<td><code>dbVersion</code></td>
<td>number</td>
<td>Database version</td>
<td>1</td>
</tr>
<tr>
<td><code>dbStore</code></td>
<td>string</td>
<td>Object storage name</td>
<td>&#39;run-objects&#39;</td>
</tr>
</tbody></table>
<h4 id='api-reference-plugins-browsercache-maxmemorysizemb'>maxMemorySizeMB</h4>
<p><code>maxMemorySizeMB: number</code></p>

<p>Size in megabytes (MB) of the in-memory cache. This value may be changed at runtime.</p>
<h3 id='api-reference-plugins-inventory'>Inventory</h3>
<p>Tracks jigs assigned to the current owner. An Inventory is automatically created with a new Run instance and assigned to <code>Run.inventory</code>.</p>
<h4 id='api-reference-plugins-inventory-jigs'>jigs</h4>
<blockquote>
<p>Load all jigs that are tickets</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="c1">// Update the inventory's jigs</span>
<span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">inventory</span><span class="p">.</span><span class="nx">sync</span><span class="p">()</span>

<span class="c1">// Find the ticket</span>
<span class="kr">const</span> <span class="nx">ticketClassOrigin</span> <span class="o">=</span> <span class="s1">'e4a9618d3a187448feeb95ff30f7ec6381a025316cdcae2cdf388ad3de7fab6f_o1'</span>
<span class="kr">const</span> <span class="nx">ticket</span> <span class="o">=</span> <span class="nx">run</span><span class="p">.</span><span class="nx">inventory</span><span class="p">.</span><span class="nx">jigs</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">jig</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">origin</span> <span class="o">===</span> <span class="nx">ticketClassOrigin</span><span class="p">)</span>
</code></pre>
<p><code>jigs: Array&lt;Jig&gt;</code></p>

<p>Returns an array of all jig objects owned by the Run owner. This array is cached. To update it, call <code>run.inventory.sync()</code>.</p>
<h4 id='api-reference-plugins-inventory-code'>code</h4>
<blockquote>
<p>Load the user&#39;s classes</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="c1">// Update the inventory's code</span>
<span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">inventory</span><span class="p">.</span><span class="nx">sync</span><span class="p">()</span>

<span class="c1">// Find all classes we known that extend from a known origin</span>
<span class="kr">const</span> <span class="nx">itemBaseClassOrigin</span> <span class="o">=</span> <span class="s1">'e4a9618d3a187448feeb95ff30f7ec6381a025316cdcae2cdf388ad3de7fab6f_o2'</span>
<span class="kr">const</span> <span class="nx">ItemBase</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">itemBaseClassOrigin</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">itemClasses</span> <span class="o">=</span> <span class="nx">run</span><span class="p">.</span><span class="nx">inventory</span><span class="p">.</span><span class="nx">code</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">T</span> <span class="o">=&gt;</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">T</span><span class="p">)</span> <span class="o">===</span> <span class="nx">ItemBase</span><span class="p">)</span>
</code></pre>
<p><code>code: Array&lt;function&gt;</code></p>

<p>An array of all jig classes and functions owned by the Run owner. This array is cached. To update it, call <code>run.inventory.sync()</code>.</p>

<p>It is best to identify code using origins as seen on the right. Identifying classes by their names is not secure.</p>
<h4 id='api-reference-plugins-inventory-sync'>sync()</h4>
<p><code>sync(): Promise&lt;void&gt;</code></p>

<p>Updates the local jig objects and code with the latest UTXO set.</p>
<h3 id='api-reference-plugins-localcache'>LocalCache</h3>
<p><code>class LocalCache implements Cache { ... }</code></p>

<p>An in-memory LRU <a href="#api-reference-apis-cache">Cache</a> implementation with a maximum size. <code>LocalCache</code> is the default implementation of the <code>Cache</code> API when using Node. The <code>Run</code> class will create one automatically if no cache is provided.</p>

<p><code>LocalCache</code> may be accessed via <code>Run.plugins.LocalCache</code>.</p>
<h4 id='api-reference-plugins-localcache-constructor-options'>constructor(options)</h4>
<p><code>constructor(options: ?object)</code></p>

<p>Creates the local cache. The options object may be used to configure the cache.</p>
<h5 id='api-reference-plugins-localcache-constructor-options-options'>Options</h5>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><code>maxSizeMB</code></td>
<td>number</td>
<td>Max size in megabytes (MB) of the cached data stored in memory</td>
<td>10 (10MB)</td>
</tr>
</tbody></table>
<h4 id='api-reference-plugins-localcache-maxsizemb'>maxSizeMB</h4>
<p><code>maxSizeMB: number</code></p>

<p>The maximum amount of data stored in the state cache in megabytes.</p>

<p>If this value is less than the current size, the cache will be shrunk to fit.</p>
<h3 id='api-reference-plugins-localowner'>LocalOwner</h3>
<p><code>class LocalOwner implements Owner { ... }</code></p>

<p>The default <a href="#api-reference-apis-owner">Owner</a> implementation that uses a local private key to sign transactions. It is able to sign both standard locks (including addresses and public key strings) as well as group locks. Jigs created will all be assigned to the same address.</p>

<p><code>LocalOwner</code> may be accessed via <code>Run.plugins.LocalOwner</code>.</p>
<h4 id='api-reference-plugins-localowner-constructor-options'>constructor(options)</h4>
<p><code>constructor(options: object): LocalOwner</code></p>

<p>Creates a <code>LocalOwner</code> with the provided configuration.</p>
<h5 id='api-reference-plugins-localowner-constructor-options-options'>Options</h5>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><code>privkey</code></td>
<td>string or bsv.PrivateKey</td>
<td>Private key used to own jigs and other resources</td>
<td>Randomly generated</td>
</tr>
<tr>
<td><code>blockchain</code></td>
<td><code>Blockchain</code></td>
<td>Blockchain used to query UTXOs. If none is specified, then the inventory will not be synced.</td>
<td>None</td>
</tr>
</tbody></table>
<h4 id='api-reference-plugins-localowner-privkey'>privkey</h4>
<p><code>privkey: string</code></p>

<p>Hex private key string used to sign jig updates. This is read-only.</p>
<h4 id='api-reference-plugins-localowner-address'>address</h4>
<p><code>address: string</code></p>

<p>Address used to assign to new jigs. This is read-only.</p>
<h3 id='api-reference-plugins-localpurse'>LocalPurse</h3>
<p><code>class LocalPurse implements Purse { ... }</code></p>

<p>The <a href="#api-reference-apis-purse">Purse</a> implementation that Run uses by default to pay for transactions using a local wallet. This is an implementation of the <code>Purse</code> API.</p>

<p><code>LocalPurse</code> may be accessed via <code>Run.plugins.LocalPurse</code>.</p>
<h4 id='api-reference-plugins-localpurse-constructor-options'>constructor(options)</h4>
<p><code>constructor(options: object): LocalPurse</code></p>

<p>Creates a <code>LocalPurse</code> with the provided configuration.</p>
<h5 id='api-reference-plugins-localpurse-constructor-options-options'>Options</h5>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><code>privkey</code></td>
<td>string or bsv.PrivateKey</td>
<td>Private key used to own jigs and other resources</td>
<td><strong>Required</strong></td>
</tr>
<tr>
<td><code>blockchain</code></td>
<td><code>Blockchain</code></td>
<td>Blockchain used to query UTXOs</td>
<td><strong>Required</strong></td>
</tr>
<tr>
<td><code>splits</code></td>
<td>number</td>
<td>Number of UTXO splits to reduce mempool chain issues</td>
<td>10</td>
</tr>
<tr>
<td><code>feePerKb</code></td>
<td>number</td>
<td>Transaction fee in satoshis per kilobyte</td>
<td>1000</td>
</tr>
</tbody></table>
<h4 id='api-reference-plugins-localpurse-privkey'>privkey</h4>
<p><code>privkey: string</code></p>

<p>Private key used to sign the transaction.</p>
<h4 id='api-reference-plugins-localpurse-address'>address</h4>
<p><code>address: string</code></p>

<p>Address used to find UTXOs and receive payments.</p>
<h4 id='api-reference-plugins-localpurse-splits'>splits</h4>
<blockquote>
<p>Change the number of purse UTXO splits</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="nx">run</span><span class="p">.</span><span class="nx">purse</span><span class="p">.</span><span class="nx">splits</span> <span class="o">=</span> <span class="mi">100</span>
</code></pre>
<p><code>splits: number</code></p>

<p>The minimum number of UTXOs that the purse must have. If the number of UTXOs is less than this value, then Run will automatically split your UTXOs the next time a Run transaction is generated. The default value for <code>splits</code> is 10.</p>

<p>Increasing this value may avoid the <code>too-long-mempool-chain</code> error. For more information, see <a href="#tips-and-tricks-debugging">Debugging Tips</a>.</p>
<h4 id='api-reference-plugins-localpurse-balance'>balance()</h4>
<blockquote>
<p>Querying the current balance</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Satoshis'</span><span class="p">,</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">purse</span><span class="p">.</span><span class="nx">balance</span><span class="p">())</span>
</code></pre>
<p><code>balance(): Promise&lt;number&gt;</code></p>

<p>Returns a promise that resolves to the current balance in satoshis of this purse. This is the sum of all satoshis in this purse&#39;s unspent outputs.</p>
<h4 id='api-reference-plugins-localpurse-utxos'>utxos()</h4>
<blockquote>
<p>Building a transaction using the purse</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">utxos</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">purse</span><span class="p">.</span><span class="nx">utxos</span><span class="p">()</span>
<span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bsv</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">().</span><span class="nx">from</span><span class="p">(</span><span class="nx">utxos</span><span class="p">).</span><span class="nx">change</span><span class="p">(</span><span class="nx">run</span><span class="p">.</span><span class="nx">purse</span><span class="p">.</span><span class="nx">address</span><span class="p">).</span><span class="nx">sign</span><span class="p">(</span><span class="nx">run</span><span class="p">.</span><span class="nx">purse</span><span class="p">.</span><span class="nx">privateKey</span><span class="p">)</span>
</code></pre>
<p><code>utxos(): Promise&lt;{txid: string, vout: number, script: bsv.Script, satoshis: number}&gt;</code></p>

<p>Returns a promise that resolves to the current UTXOs of this purse.</p>
<h3 id='api-reference-plugins-mattercloud'>MatterCloud</h3>
<blockquote>
<p>Connect to MatterCloud Blockchain API with the given API key</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">blockchain</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">MatterCloud</span><span class="p">({</span> <span class="na">apiKey</span><span class="p">:</span> <span class="s1">'...'</span> <span class="p">})</span>

<span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="nx">blockchain</span> <span class="p">})</span>
</code></pre>
<p><code>class MatterCloud implements Blockchain { ... }</code></p>

<p>A <a href="#api-reference-apis-blockchain">Blockchain</a> implementation that connects to the MatterCloud API. Only mainnet is supported.</p>

<p><code>MatterCloud</code> may be accessed via <code>Run.plugins.MatterCloud</code>.</p>
<h4 id='api-reference-plugins-mattercloud-constructor-options'>constructor(options)</h4>
<p><code>constructor(options: object): MatterCloud</code></p>

<p>Creates a <code>MatterCloud</code> instance with the provided configuration.</p>
<h5 id='api-reference-plugins-mattercloud-constructor-options-options'>Options</h5>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><code>apiKey</code></td>
<td>string</td>
<td>API key to use. Currently, only MatterCloud API supports this option.</td>
<td>undefined</td>
</tr>
</tbody></table>
<h3 id='api-reference-plugins-mockchain'>Mockchain</h3>
<blockquote>
<p>Getting the mockchain from a run instance</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="na">network</span><span class="p">:</span> <span class="s1">'mock'</span> <span class="p">})</span>

<span class="kr">const</span> <span class="nx">mockchain</span> <span class="o">=</span> <span class="nx">run</span><span class="p">.</span><span class="nx">blockchain</span>
</code></pre>
<blockquote>
<p>Creating a mockchain manually and passing it into <code>Run</code></p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">mockchain</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">Mockchain</span><span class="p">()</span>

<span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="na">blockchain</span><span class="p">:</span> <span class="nx">mockchain</span> <span class="p">})</span>
</code></pre>
<p><code>class Mockchain implements Blockchain { ... }</code></p>

<p>The <em>mockchain</em> is a local simulation of a blockchain that stored entirely in memory. It implements the <a href="#api-reference-apis-blockchain">Blockchain API</a>. It accepts and validates real Bitcoin transactions using testnet settings. The mockchain simulates many aspects of a real Bitcoin API, including the 25 chained mempool limit, but everything happens locally.</p>

<p>We recommend using the mockchain during development and unit testing. The mockchain lets you simulate Run without requiring network connectivity and without spending real bitcoins. Note that when the program closes however, all mockchain data is lost, so it is not a substitute for a real network.</p>

<p>The class is accessible via <code>Run.plugins.Mockchain</code>, or as an instance in <code>run.blockchain</code> after setting the network to <code>mock</code>.</p>
<h4 id='api-reference-plugins-mockchain-constructor'>constructor()</h4>
<p><code>constructor()</code></p>

<p>Creates a new mockchain. There are no parameters.</p>
<h4 id='api-reference-plugins-mockchain-fund-address-satoshis'>fund(address, satoshis)</h4>
<p><code>fund(address: string, satoshis: number)</code></p>

<p>Directly funds an address with an amount of satoshis without requiring the spending of any inputs. The Run class will automatically fund the purse, but you may fund additional addresses using this method.</p>
<h4 id='api-reference-plugins-mockchain-block'>block()</h4>
<p><code>block()</code></p>

<p>Creates a new simulated block. This is useful when the 25 chained mempool limit is hit.</p>
<h3 id='api-reference-plugins-payserver'>PayServer</h3>
<blockquote>
<p>Create Run and use the testnet pay server</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">apiKey</span> <span class="o">=</span> <span class="s1">'&lt;your-api-key&gt;'</span>
<span class="kr">const</span> <span class="nx">payServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">PayServer</span><span class="p">(</span><span class="nx">apiKey</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="na">network</span><span class="p">:</span> <span class="s1">'test'</span><span class="p">,</span> <span class="na">purse</span><span class="p">:</span> <span class="nx">payServer</span> <span class="p">})</span>
</code></pre>
<p><code>class PayServer implements Purse { ... }</code></p>

<p>A <a href="#api-reference-apis-purse">Purse</a> implementation that uses the Run Pay Server to pay for transactions.</p>

<p><code>PayServer</code> may be accessed via <code>Run.plugins.PayServer</code>.</p>
<h4 id='api-reference-plugins-payserver-constructor-apikey'>constructor(apiKey)</h4>
<p><code>constructor(apiKey: string)</code></p>

<p>Creates the PayServer with a given API key. The API key may be generated via <code>https://api.run.network/v1/test/pay/generate</code>. Only testnet is supported today.</p>
<h3 id='api-reference-plugins-viewer'>Viewer</h3>
<blockquote>
<p>Load the jigs owned by another user</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">viewer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">Viewer</span><span class="p">(</span><span class="nx">customLock</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="na">owner</span><span class="p">:</span> <span class="nx">viewer</span> <span class="p">})</span>

<span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">inventory</span><span class="p">.</span><span class="nx">sync</span><span class="p">()</span>

<span class="c1">// run.inventory.jigs will contain their jigs</span>
</code></pre>
<p><code>class Viewer implements Owner</code></p>

<p>An <a href="#api-reference-apis-owner">Owner</a> implementation for loading another user&#39;s jigs.</p>

<p>These resources will be read-only and the <code>Viewer</code> will not be able to sign for any updates.</p>

<p><code>Viewer</code> may be accessed via <code>Run.plugins.Viewer</code>.</p>
<h4 id='api-reference-plugins-viewer-constructor-owner'>constructor(owner)</h4>
<p><code>constructor(owner: string|Lock)</code></p>

<p>Creates a new viewer.</p>
<h3 id='api-reference-plugins-whatsonchain'>WhatsOnChain</h3>
<blockquote>
<p>Connect to WhatsOnChain API on testnet</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">blockchain</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">WhatsOnChain</span><span class="p">({</span> <span class="na">network</span><span class="p">:</span> <span class="s1">'testnet'</span> <span class="p">})</span>

<span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="nx">blockchain</span> <span class="p">})</span>
</code></pre>
<p><code>class WhatsOnChain implements Blockchain { ... }</code></p>

<p>A <a href="#api-reference-apis-blockchain">Blockchain</a> implementation that connects to the WhatsOnChain API.</p>

<p><code>WhatsOnChain</code> may be accessed via <code>Run.plugins.WhatsOnChain</code>.</p>
<h4 id='api-reference-plugins-whatsonchain-constructor-options'>constructor(options)</h4>
<p><code>constructor(options: object): WhatsOnChain</code></p>

<p>Creates a <code>WhatsOnChain</code> with the provided configuration.</p>
<h5 id='api-reference-plugins-whatsonchain-constructor-options-options'>Options</h5>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td><code>network</code></td>
<td>string</td>
<td>Either main or test</td>
<td>main</td>
</tr>
</tbody></table>
<h2 id='api-reference-extras'>Extras</h2>
<p>Run ships with several built-in code creations that are part of its standard library. These include the standard <code>Token2</code> class for numerical tokens and several other helpers. Each code below is predeployed and available under <code>Run.extra</code>.</p>
<h3 id='api-reference-extras-asm'>asm</h3>
<blockquote>
<p>Create a custom R-puzzle output script</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="nx">asm</span><span class="p">(</span><span class="s2">`OP_DUP OP_3 OP_SPLIT OP_NIP OP_1 OP_SPLIT OP_SWAP OP_SPLIT OP_DROP OP_HASH160 </span><span class="p">${</span><span class="nx">rhash</span><span class="p">}</span><span class="s2"> OP_EQUALVERIFY OP_OVER OP_CHECKSIGVERIFY OP_CHECKSIG`</span><span class="p">)</span>
</code></pre>
<p><code>function asm(s: string): string</code></p>

<p>Converts a Bitcoin script string in ASM notation into its hex string format. This code is deterministic and safe to use within Jigs. It is often useful when creating <a href="#advanced-usage-locks">custom owner locks</a>.</p>

<p>It is available via <code>Run.extra.asm</code> and predeployed at the following locations:</p>

<table><thead>
<tr>
<th>Network</th>
<th>Location</th>
</tr>
</thead><tbody>
<tr>
<td>main</td>
<td>61e1265acb3d93f1bf24a593d70b2a6b1c650ec1df90ddece8d6954ae3cdd915_o1</td>
</tr>
<tr>
<td>test</td>
<td>1f0abf8d94477b1cb57629d861376616f6e1d7b78aba23a19da3e6169caf489e_o1</td>
</tr>
</tbody></table>
<h3 id='api-reference-extras-b'>B</h3>
<p><code>class B extends Berry { ... }</code></p>

<p>The <code>B</code> class loads file data stored on the blockchain into a JavaScript object. You may use <code>B</code> to load images, 3D models, CSS styles, and more, to attach to your jigs, to display in your apps, or for any other purpose. The B:// data format is well-established as a method for storing files on-chain, and services like <a href="www.bitcoinfiles.org">Bitcoin Files</a> allow you to upload and view them easily. Run uses B data to represent images for jigs. See <a href="#advanced-usage-standard-metadata">Standard Metadata</a> for more.</p>

<p>To load a <code>B</code> berry, call either <code>B.load()</code> or <code>B.loadWithMetadata()</code>. <code>B</code> will load the <em>first</em> output containing B data in the transaction.</p>

<p>It is available via <code>Run.extra.B</code> and predeployed at the following locations:</p>

<table><thead>
<tr>
<th>Network</th>
<th>Location</th>
</tr>
</thead><tbody>
<tr>
<td>main</td>
<td>6fe169894d313b44bd54154f88e1f78634c7f5a23863d1713342526b86a39b8b_o1</td>
</tr>
<tr>
<td>test</td>
<td>5435ae2760dc35f4329501c61c42e24f6a744861c22f8e0f04735637c20ce987_o1</td>
</tr>
</tbody></table>
<h4 id='api-reference-extras-b-load'>load()</h4>
<blockquote>
<p>Load B:// data into an img element</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="nx">B</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="s1">'2f3492ef5401d887a93ca09820dff952f355431cea306841a70d163e32b2acad'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">b</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">imgElement</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">`data:</span><span class="p">${</span><span class="nx">b</span><span class="p">.</span><span class="nx">mediaType</span><span class="p">}</span><span class="s2">;base64, </span><span class="p">${</span><span class="nx">b</span><span class="p">.</span><span class="nx">base64Data</span><span class="p">}</span><span class="s2">`</span>
<span class="p">})</span>
</code></pre>
<p><code>load(txid: string): Promise&lt;B&gt;</code></p>

<p>Loads B:// data from the transaction with the ID passed.</p>
<h4 id='api-reference-extras-b-loadwithmetadata'>loadWithMetadata()</h4>
<blockquote>
<p>Load B:// data with attribution metadata</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">metadata</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">title</span><span class="p">:</span> <span class="s1">'T Rex skull icon'</span><span class="p">,</span>
  <span class="na">license</span><span class="p">:</span> <span class="s1">'[CC BY 3.0](http://creativecommons.org/licenses/by/3.0)'</span><span class="p">,</span>
  <span class="na">author</span><span class="p">:</span> <span class="s1">'[Delapouite](https://delapouite.com/)'</span><span class="p">,</span>
  <span class="na">source</span><span class="p">:</span> <span class="s1">'[game-icons.net](https://game-icons.net/1x1/delapouite/t-rex-skull.html)'</span>
<span class="p">}</span>

<span class="nx">await</span> <span class="nx">B</span><span class="p">.</span><span class="nx">loadWithMetadata</span><span class="p">(</span><span class="s1">'ca64bd8d129332513540d15b73519bf905e0863982a2f00f63deb38c6a44f546_o1'</span><span class="p">,</span> <span class="nx">metadata</span><span class="p">)</span>
</code></pre>
<p><code>loadWithMetadata(txid: string, metadata: ?object): Promise&lt;B&gt;</code></p>

<p>Loads B:// data and then attaches the provided metadata to the berry.</p>

<p>This is useful for adding attribution information to data that lacks it. See the <a href="#advanced-usage-standard-metadata">Standard Metadata</a> for information on metadata fields.</p>
<h4 id='api-reference-extras-b-base64data'>base64Data</h4>
<p><code>base64Data: string</code></p>

<p>The data stored using B:// represented in base 64.</p>
<h4 id='api-reference-extras-b-filename'>filename</h4>
<p><code>filename: string</code></p>

<p>The filename as declared by the B:// protocol data.</p>
<h4 id='api-reference-extras-b-mediatype'>mediaType</h4>
<p><code>mediaType: string</code></p>

<p>The W3 registered media type. Examples include <code>image/svg+xml</code> and <code>image/png</code>.</p>
<h3 id='api-reference-extras-expect'>expect</h3><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Post</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">message</span><span class="p">).</span><span class="nx">toBeString</span><span class="p">()</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">Post</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="na">expect</span><span class="p">:</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">extra</span><span class="p">.</span><span class="nx">expect</span> <span class="p">}</span>
</code></pre>
<p><code>function expect(subject) { ... }</code></p>

<p>The <code>expect</code> function is arbitrary code to help you check with parameters in Jigs. It is similar to Jest or Chai assertions. <code>expect</code> takes a single argument, <em>subject</em>, and then lets you execute one of its assertion methods on ithe subject. If the assertion passes, then nothing happens, but if it fails, an Error is thrown.</p>

<p>Each method takes an optional last parameter <em>message</em> that is the error message to throw. If none is specified, then a default error message will be created.</p>

<p>It is available via <code>Run.extra.expect</code> and predeployed at the following locations:</p>

<table><thead>
<tr>
<th>Network</th>
<th>Location</th>
</tr>
</thead><tbody>
<tr>
<td>main</td>
<td>71fba386341b932380ec5bfedc3a40bce43d4974decdc94c419a94a8ce5dfc23_o1</td>
</tr>
<tr>
<td>test</td>
<td>f97d4ac2a3d6f5ed09fad4a4f341619dc5a3773d9844ff95c99c5d4f8388de2f_o1</td>
</tr>
</tbody></table>
<h4 id='api-reference-extras-expect-not'>not</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">name</span><span class="p">).</span><span class="nx">not</span><span class="p">.</span><span class="nx">toBeNumber</span><span class="p">()</span>
</code></pre>
<p><code>not</code></p>

<p>The <code>not</code> property reverses the condition of any methods that follow.</p>
<h4 id='api-reference-extras-expect-tobe'>toBe()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">power</span> <span class="o">&gt;</span> <span class="mi">9999</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</code></pre>
<p><code>toBe(value: any, message: ?string)</code></p>

<p>Checks that the <em>subject</em> is equal to the <em>value</em>, using the javascript === operator. This does not, however, deeply compare values of an object, so for deep object comparison we recommend <code>toEqual</code>.</p>
<h4 id='api-reference-extras-expect-toequal'>toEqual()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">names</span><span class="p">).</span><span class="nx">toBe</span><span class="p">([</span><span class="s1">'Stevie'</span><span class="p">,</span> <span class="s1">'Wonder'</span><span class="p">])</span>
</code></pre>
<p><code>toEqual(value: any, message: ?string)</code></p>

<p>Deeply compares the <em>subject</em> to a <em>value</em>, which involves recursively traversing through every sub-property of objects to compare whether they are the same primitive values.</p>
<h4 id='api-reference-extras-expect-tobeinstanceof'>toBeInstanceOf()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">dragon</span><span class="p">).</span><span class="nx">toBeInstanceOf</span><span class="p">(</span><span class="nx">Dragon</span><span class="p">)</span>
</code></pre>
<p><code>toBeInstanceOf(Class: Class, message: ?string)</code></p>

<p>Checks that an object is an instance of a class or one of its parents.</p>
<h4 id='api-reference-extras-expect-tobedefined'>toBeDefined()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">message</span><span class="p">).</span><span class="nx">toBeDefined</span><span class="p">()</span>
</code></pre>
<p><code>toBeDefined(message: ?string)</code></p>

<p>Checks that a <em>value</em> is not undefined.</p>
<h4 id='api-reference-extras-expect-tobenull'>toBeNull()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">hat</span><span class="p">).</span><span class="nx">not</span><span class="p">.</span><span class="nx">toBeNull</span><span class="p">()</span>
</code></pre>
<p><code>toBeNull(message: ?string)</code></p>

<p>Checks that a <em>value</em> is null. Often this is paired with <code>not</code> to check that a value is not null, as seen on the right.</p>
<h4 id='api-reference-extras-expect-tobenumber'>toBeNumber()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">health</span><span class="p">).</span><span class="nx">toBeNumber</span><span class="p">()</span>
</code></pre>
<p><code>toBeNumber(message: ?string)</code></p>

<p>Checks that a <em>value</em> is a numerical type. Numbers including all integers, floating point numbers, NaN, and Infinity.</p>
<h4 id='api-reference-extras-expect-tobeinteger'>toBeInteger()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">amount</span><span class="p">).</span><span class="nx">toBeInteger</span><span class="p">()</span>
</code></pre>
<p><code>toBeInteger(message: ?string)</code></p>

<p>Checks that a <em>value</em> is an integer number and does not have a decimal point.</p>
<h4 id='api-reference-extras-expect-tobelessthan'>toBeLessThan()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">damage</span><span class="p">).</span><span class="nx">toBeLessThan</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
</code></pre>
<p><code>toBeLessThan(value: number, message: ?string)</code></p>

<p>Checks that a <em>value</em> is a number less than a particular number.</p>
<h4 id='api-reference-extras-expect-tobelessthanorequalto'>toBeLessThanOrEqualTo()</h4>
<p><code>toBeLessThanOrEqualTo(value: number, message: ?string)</code></p>

<p>Checks that a <em>value</em> is a number less than or equal to a particular number.</p>
<h4 id='api-reference-extras-expect-tobegreaterthan'>toBeGreaterThan()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nx">toBeGreaterThan</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre>
<p><code>toBeGreaterThan(value: number, message: ?string)</code></p>

<p>Checks that a <em>value</em> is a number greater than a particular number.</p>
<h4 id='api-reference-extras-expect-tobegreaterthanorequalto'>toBeGreaterThanOrEqualTo()</h4>
<p><code>toBeGreaterThanOrEqualTo(value: number, message: ?string)</code></p>

<p>Checks that a <em>value</em> is a number greater than or equal to a particular number.</p>
<h4 id='api-reference-extras-expect-tobeboolean'>toBeBoolean()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">weaponsEnabled</span><span class="p">).</span><span class="nx">toBeBoolean</span><span class="p">()</span>
</code></pre>
<p><code>toBeBoolean(message: ?string)</code></p>

<p>Checks that a <em>value</em> is either true or false.</p>
<h4 id='api-reference-extras-expect-tobestring'>toBeString()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">name</span><span class="p">).</span><span class="nx">toBeString</span><span class="p">()</span>
</code></pre>
<p><code>toBeString(message: ?string)</code></p>

<p>Checks that a <em>value</em> is a string. It may still be the empty string however.</p>
<h4 id='api-reference-extras-expect-tobeobject'>toBeObject()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">properties</span><span class="p">).</span><span class="nx">toBeObject</span><span class="p">()</span>
</code></pre>
<p><code>toBeObject(message: ?string)</code></p>

<p>Checks that a <em>value</em> is a non-null object or an Array. </p>
<h4 id='api-reference-extras-expect-tobearray'>toBeArray()</h4><pre class="highlight plaintext"><code>expect(tokens).toBeArray()
</code></pre>
<p><code>toBeArray(message: ?string)</code></p>

<p>Checks that a <em>value</em> is an array. It may be empty.</p>
<h4 id='api-reference-extras-expect-tobeset'>toBeSet()</h4><pre class="highlight plaintext"><code>expect(whitelist).toBeSet()
</code></pre>
<p><code>toBeSet(message: ?string)</code></p>

<p>Checks that a <em>value</em> is a Set instance. It may be empty.</p>
<h4 id='api-reference-extras-expect-tobemap'>toBeMap()</h4><pre class="highlight plaintext"><code>expect(users).toBeMap()
</code></pre>
<p><code>toBeMap(message: ?string)</code></p>

<p>Checks that a <em>value</em> is Map instance. It may be empty.</p>
<h4 id='api-reference-extras-expect-tobeuint8array'>toBeUint8Array()</h4><pre class="highlight plaintext"><code>expect(buffer).toBeUint8Array()
</code></pre>
<p><code>toBeUint8Array(message: ?string)</code></p>

<p>Checks that a <em>value</em> is a Uint8Array instance. It may be empty.</p>
<h4 id='api-reference-extras-expect-tobeclass'>toBeClass()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">CustomLock</span><span class="p">).</span><span class="nx">toBeClass</span><span class="p">()</span>
</code></pre>
<p><code>toBeClass(message: ?string)</code></p>

<p>Checks that a type is a class.</p>
<h4 id='api-reference-extras-expect-tobefunction'>toBeFunction()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">calculateDamage</span><span class="p">).</span><span class="nx">toBeFunction</span><span class="p">()</span>
</code></pre>
<p><code>toBeFunction(message: ?string)</code></p>

<p>Checks that a type is a function. Classes are not considered functions for this assert.</p>
<h4 id='api-reference-extras-expect-tobejigclass'>toBeJigClass()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">Dragon</span><span class="p">).</span><span class="nx">toBeJigClass</span><span class="p">()</span>
</code></pre>
<p><code>toBeJigClass(message: ?string)</code></p>

<p>Checks that a type is a class that extends from <code>Jig</code>.</p>
<h4 id='api-reference-extras-expect-toextendfrom'>toExtendFrom()</h4><pre class="highlight javascript tab-javascript"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">MyToken</span><span class="p">).</span><span class="nx">toExtendFrom</span><span class="p">(</span><span class="nx">Token2</span><span class="p">)</span>
</code></pre>
<p><code>toExtendFrom(T: function)</code></p>

<p>Checks that a class extends from another class.</p>
<h3 id='api-reference-extras-group'>Group</h3>
<blockquote>
<p>Create and then sign a 2-3 multi-sig</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="c1">// Create a token owned by a 2-3 multi-sig</span>
<span class="nx">token</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="k">new</span> <span class="nx">Group</span><span class="p">([</span><span class="nx">pubkey1</span><span class="p">,</span> <span class="nx">pubkey2</span><span class="p">,</span> <span class="nx">pubkey3</span><span class="p">],</span> <span class="mi">2</span><span class="p">))</span>

<span class="c1">// Begin a transaction to spend it and sign with key #1</span>
<span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="na">owner</span><span class="p">:</span> <span class="nx">privkey1</span> <span class="p">})</span>
<span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">()</span>
<span class="nx">tx</span><span class="p">.</span><span class="nx">update</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">token</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">address</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span>
<span class="nx">await</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">pay</span><span class="p">()</span>
<span class="nx">await</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">sign</span><span class="p">()</span>

<span class="c1">// Co-sign with key #2</span>
<span class="nx">run</span><span class="p">.</span><span class="nx">owner</span> <span class="o">=</span> <span class="nx">privkey2</span>
<span class="nx">await</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">sign</span><span class="p">()</span>
<span class="nx">await</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">publish</span><span class="p">()</span>
</code></pre>
<p><code>class Group implements Lock { ... }</code></p>

<p>A group lock is a m-of-n multi-sig output used to have more than one user own a resource. Combined with the <code>LocalOwner</code> and <code>TransactionAPI</code>, Run is able to sign group locks using its default <code>LocalOwner</code> in any order. See the example to the right.</p>

<p>A <code>Group</code> lock is as secure as bitcoins themselves. If some parties can update a jig, they can also destroy the jig.</p>

<p>It is available via <code>Run.extra.Group</code> and predeployed at the following locations:</p>

<table><thead>
<tr>
<th>Network</th>
<th>Location</th>
</tr>
</thead><tbody>
<tr>
<td>main</td>
<td>780ab8919cb89323707338070323c24ce42cdec2f57d749bd7aceef6635e7a4d_o1</td>
</tr>
<tr>
<td>test</td>
<td>63e0e1268d8ab021d1c578afb8eaa0828ccbba431ffffd9309d04b78ebeb6e56_o1</td>
</tr>
</tbody></table>
<h4 id='api-reference-extras-group-constructor-pubkeys-required'>constructor(pubkeys, required)</h4>
<p><code>constructor(pubkeys: Array&lt;string&gt;, required: number): Group</code></p>

<p>Creates a m-of-n <code>Group</code> for the set of public keys.</p>

<p>The maximum length of <code>pubkeys</code> is 16. If <code>required</code> is not specified, then it is the number of pubkeys.</p>
<h4 id='api-reference-extras-group-add-pubkey'>add(pubkey)</h4>
<p><code>add(pubkey: string)</code></p>

<p>Adds a pubkey to the pubkey list if it does not already exist.</p>
<h4 id='api-reference-extras-group-pubkeys-array'>pubkeys: Array<string></h4>
<p>Array of public keys that are partial owners. There can be no more than 16 and they must be hex strings.</p>
<h4 id='api-reference-extras-group-required-number'>required: number</h4>
<p>Number of signatures required to unlock the output. This is the m in m-of-n multi-sig.</p>
<h3 id='api-reference-extras-hex'>Hex</h3>
<p>It is available via <code>Run.extra.Hex</code> and predeployed at the following locations:</p>

<table><thead>
<tr>
<th>Network</th>
<th>Location</th>
</tr>
</thead><tbody>
<tr>
<td>main</td>
<td>727e7b423b7ee40c0b5be87fba7fa5673ea2d20a74259040a7295d9c32a90011_o1</td>
</tr>
<tr>
<td>test</td>
<td>1f0abf8d94477b1cb57629d861376616f6e1d7b78aba23a19da3e6169caf489e_o2</td>
</tr>
</tbody></table>
<h4 id='api-reference-extras-hex-static-stringtobytes'>static stringToBytes</h4>
<p><code>static bytesToString(b: Array&lt;number&gt;): string</code></p>

<p>Converts a array of bytes to a hex string. This method will throw if any entries in the array are not bytes.</p>

<p><code>static stringToBytes(s: string): Array&lt;number&gt;</code></p>

<p>Converts a hex string into an array of bytes. This method will throw if the string is not a a valid hex string.</p>
<h3 id='api-reference-extras-token'>Token</h3>
<p><code>class Token extends Jig { ... }</code></p>

<p><code>Token</code> is a standard base class for fungible tokens similar to ERC-20 or SLP. It may be used for shares, loyalty points, gift cards, and more. Each <code>Token</code> instance defines a numerical amount held by its owner. You extend from <code>Token</code> to define a new kind of token. As the owner of this new token <em>class</em>, only you can mint new token instances. The token instances you mint though may be sent, owned, traded, and combined together with others. Like bitcoins, they are permissionless and only require their owner&#39;s approval to use.</p>

<p><code>Token</code> supports integer amounts like ERC-20 in its <code>amount</code> field. In practice, you will often wish to display the token&#39;s amount with a decimal, like <code>1.50</code>. The <code>static decimals</code> property may be used to declare how many digits the amount is to be shifted when the amount is displayed. In the previous example, <code>amount</code> would be 150 and <code>decimals</code> would be 2.</p>

<p>It is available via <code>Run.extra.Token</code> and predeployed at the following locations:</p>

<table><thead>
<tr>
<th>Network</th>
<th>Location</th>
</tr>
</thead><tbody>
<tr>
<td>main</td>
<td>72a61eb990ffdb6b38e5f955e194fed5ff6b014f75ac6823539ce5613aea0be8_o1</td>
</tr>
<tr>
<td>test</td>
<td>7d14c868fe39439edffe6982b669e7b4d3eb2729eee7c262ec2494ee3e310e99_o1</td>
</tr>
</tbody></table>
<h4 id='api-reference-extras-token-static-mint-amount-to'>static mint(amount, to)</h4>
<blockquote>
<p>Minting a new token</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">MyCustomToken</span> <span class="kr">extends</span> <span class="nx">Token</span> <span class="p">{</span> <span class="p">}</span>

<span class="kr">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">MyCustomToken</span><span class="p">.</span><span class="nx">mint</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</code></pre>
<p><code>mint(amount: number, to: ?(string|Lock)): Token</code></p>

<p><code>mint()</code> issues a new token with a specified amount. Only the owner of the extended token class is able to call this method. The newly minted token will be assigned to the <code>to</code> address if specified, or to to the token class&#39;s owner if not.</p>
<h4 id='api-reference-extras-token-send-to-amount'>send(to, amount)</h4><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyCustomToken</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">sent</span> <span class="o">=</span> <span class="nx">token</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">pubkey</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sent</span><span class="p">.</span><span class="nx">amount</span><span class="p">)</span> <span class="c1">// 20</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">amount</span><span class="p">)</span> <span class="c1">// 80</span>
</code></pre>
<p><code>send(to: string|Lock, amount: ?number): Token</code></p>

<p>Sends amounts from this token to another user, creating a new Token in the process. The returned token will have the <code>amount</code> specified and the current token will have its <code>amount</code> decreased accordingly. When its <code>amount</code> becomes zero, the token is automatically destroyed. If <code>amount</code> is not specified, when the entire token amount is sent.</p>
<h4 id='api-reference-extras-token-combine-tokens'>combine(...tokens)</h4>
<blockquote>
<p>Combining three tokens newly minted</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">token1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyCustomToken</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">token2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyCustomToken</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">token3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyCustomToken</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">combined</span> <span class="o">=</span> <span class="nx">token1</span><span class="p">.</span><span class="nx">combine</span><span class="p">(</span><span class="nx">token2</span><span class="p">,</span> <span class="nx">token3</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">combine</span><span class="p">.</span><span class="nx">amount</span><span class="p">)</span> <span class="c1">// 60</span>
</code></pre>
<blockquote>
<p>Combining and sending tokens in a single transaction</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">tokens</span> <span class="o">=</span> <span class="nx">run</span><span class="p">.</span><span class="nx">inventory</span><span class="p">.</span><span class="nx">jigs</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">jig</span> <span class="o">=&gt;</span> <span class="nx">jig</span> <span class="k">instanceof</span> <span class="nx">MyCustomToken</span><span class="p">)</span>

<span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">combined</span> <span class="o">=</span> <span class="nx">tokens</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">combine</span><span class="p">(...</span><span class="nx">tokens</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>

  <span class="nx">combined</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">pubkey</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>
<p><code>combine(...tokens: Token): Token</code></p>

<p><code>combine</code> will merge the multiple tokens into a single token that has the combined amount. The tokens to combine must all be the same kind and the returned token object will be the same token that was called.</p>

<p>Tokens are like Bitcoin outputs. Every time you send some tokens, you split off an amount into a new output. Just like Bitcoins, you may later want to merge them back together. It is often useful to do this right before sending your tokens so that you can send their full amount. The example on the right shows how to combine and send tokens in a single transaction.</p>
<h4 id='api-reference-extras-token-amount'>amount</h4>
<p><code>amount: number</code></p>

<p>The integer value held within this token. The meaning of <code>amount</code> depends on the token.</p>
<h4 id='api-reference-extras-token-static-decimals'>static decimals</h4><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">USDToken</span> <span class="kr">extends</span> <span class="nx">Token</span> <span class="p">{</span> <span class="p">}</span>

<span class="nx">USDToken</span><span class="p">.</span><span class="nx">decimals</span> <span class="o">=</span> <span class="mi">2</span>

<span class="kr">const</span> <span class="nx">dollars</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">USDToken</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>

<span class="kd">let</span> <span class="nx">displayAmount</span> <span class="o">=</span> <span class="nx">dollars</span><span class="p">.</span><span class="nx">amount</span>
<span class="k">while</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">USDToken</span><span class="p">.</span><span class="nx">decimals</span><span class="p">.</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">displayAmount</span> <span class="o">/=</span> <span class="mi">10</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">displayAmount</span><span class="p">)</span> <span class="c1">// 1.00</span>
</code></pre>
<p><code>static decimals: number</code></p>

<p>The number of decimal places to shift the <code>amount</code> when displaying it. <code>Token</code> uses integers by default for precision, just like ERC-20, but often times you will want to specify a decimals value to indicate a unit for display to the user. For example, a US Dollar coin might set decimals to 2 so that the base amount is cents but the display value is dollars.</p>
<h3 id='api-reference-extras-tx'>Tx</h3>
<blockquote>
<p>Load an OP_RETURN into a berry</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">OpReturn</span> <span class="kr">extends</span> <span class="nx">Berry</span> <span class="p">{</span>
  <span class="nx">async</span> <span class="kr">static</span> <span class="nx">pluck</span><span class="p">(</span><span class="nx">txid</span><span class="p">,</span> <span class="nx">fetch</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">rawtx</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">txid</span><span class="p">)</span>
    <span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tx</span><span class="p">(</span><span class="nx">rawtx</span><span class="p">)</span>
    <span class="kr">const</span> <span class="nx">script</span> <span class="o">=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">script</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">script</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s1">'6a'</span><span class="p">))</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'No an OP_RETURN'</span><span class="p">)</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">OpReturn</span><span class="p">(</span><span class="nx">tx</span><span class="p">.</span><span class="nx">outputs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">script</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="nx">init</span><span class="p">(</span><span class="nx">script</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">script</span> <span class="o">=</span> <span class="nx">script</span> <span class="p">}</span>
<span class="p">}</span>

<span class="nx">OpReturn</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="na">Tx</span><span class="p">:</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">extra</span><span class="p">.</span><span class="nx">Tx</span> <span class="p">}</span>
</code></pre>
<p><code>class Tx { ... }</code></p>

<p>Parses a raw hex transactions into an object that can be inspected. This is often useful when creating berries from transactions.</p>

<p>It is available via <code>Run.extra.Tx</code> and predeployed at the following locations:</p>

<table><thead>
<tr>
<th>Network</th>
<th>Location</th>
</tr>
</thead><tbody>
<tr>
<td>main</td>
<td>312985bd960ae4c59856b3089b04017ede66506ea181333eec7c9bb88b11c490_o2</td>
</tr>
<tr>
<td>test</td>
<td>33e78fa7c43b6d7a60c271d783295fa180b7e9fce07d41ff1b52686936b3e6ae_o2</td>
</tr>
</tbody></table>
<h4 id='api-reference-extras-tx-constructor-rawtx'>constructor(rawtx)</h4>
<p><code>constructor(rawtx: string): Tx</code></p>

<p>Parses the raw transaction into a <code>Tx</code> object. The constructor will throw an error if <code>rawtx</code> is not a valid Bitcoin transaction.</p>
<h4 id='api-reference-extras-tx-inputs'>inputs</h4>
<p><code>inputs: Array&lt;{prevTxId: string, outputIndex: number, script: string, sequenceNumber: number}&gt;</code></p>

<p>Transaction inputs array.</p>
<h4 id='api-reference-extras-tx-outputs'>outputs</h4>
<p><code>outputs: Array&lt;{satoshis: number, script: string}</code></p>

<p>Transaction outputs array.</p>
<h4 id='api-reference-extras-tx-version'>version</h4>
<p><code>version: number</code></p>

<p>The version number of the transaction.</p>
<h4 id='api-reference-extras-tx-nlocktime'>nLockTime</h4>
<p><code>nLockTime: number</code></p>

<p>The lock time of the transaction.</p>
<h3 id='api-reference-extras-txo'>txo</h3>
<blockquote>
<p>Parse a Twetch transaction into a berry</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="p">{</span> <span class="nx">txo</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">extra</span>

<span class="kr">class</span> <span class="nx">TwetchPost</span> <span class="kr">extends</span> <span class="nx">Berry</span> <span class="p">{</span>
  <span class="nx">init</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="nx">text</span>
  <span class="p">}</span>

  <span class="kr">static</span> <span class="nx">async</span> <span class="nx">pluck</span> <span class="p">(</span><span class="nx">txid</span><span class="p">,</span> <span class="nx">fetch</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">txo</span><span class="p">(</span><span class="nx">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">txid</span><span class="p">))</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">out</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">s2</span> <span class="o">===</span> <span class="s1">'19HxigV4QyBv3tHpQVcUEQyq1pzZVdoAut'</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nx">TwetchPost</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">out</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">s3</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">TwetchPost</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">txo</span> <span class="p">}</span>
</code></pre>
<p><code>function txo(rawtx: string): object</code></p>

<p>Parses a raw hex transaction into a <a href="https://github.com/interplanaria/txo">TXO</a> data structure. This is often an easy way to interpret a transaction for a Berry.</p>

<p>The following fields are supported:</p>

<ul>
<li>bN (base58)</li>
<li>hN (hex)</li>
<li>sN (utf8)</li>
<li>bN.op (opcode num)</li>
<li>e.h (txid)</li>
<li>e.i (output index)</li>
<li>e.v (satoshis)</li>
<li>seq</li>
<li>i</li>
</ul>

<p>It is available via <code>Run.extra.txo</code> and predeployed at the following locations:</p>

<table><thead>
<tr>
<th>Network</th>
<th>Location</th>
</tr>
</thead><tbody>
<tr>
<td>main</td>
<td>312985bd960ae4c59856b3089b04017ede66506ea181333eec7c9bb88b11c490_o1</td>
</tr>
<tr>
<td>test</td>
<td>33e78fa7c43b6d7a60c271d783295fa180b7e9fce07d41ff1b52686936b3e6ae_o1</td>
</tr>
</tbody></table>
<h2 id='api-reference-apis'>APIs</h2>
<blockquote>
<p>Check if a custom owner implementation will be accepted by Run</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">MyOwner</span> <span class="p">{</span> <span class="cm">/* implementation */</span> <span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">MyOwner</span><span class="p">()</span> <span class="k">instanceof</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">api</span><span class="p">.</span><span class="nx">Owner</span><span class="p">)</span>
</code></pre>
<p>This section describes APIs that may be implemented by the developer to customize Run. Each API is available under <code>Run.api</code> and some commonly-used implementations of these APIs are provided via the built-in <a href="#api-reference-plugins">Plugins</a>. You may check that your implementation conforms to the interface by using <code>instanceof</code> on instances. You do not have to extend from the API classes for an implementation to be considered valid.</p>
<h3 id='api-reference-apis-blockchain'>Blockchain</h3>
<p><code>class Blockchain { ... }</code></p>

<p>The interface Run uses to communicate with the Bitcoin network. Run ships with several implementations: <a href="#api-reference-plugins-runconnect">RunConnect</a>, <a href="#api-reference-plugins-mattercloud">MatterCloud</a>, <a href="#api-reference-plugins-whatsonchain">WhatsOnChain</a>, and the <a href="#api-reference-plugins-mockchain">Mockchain</a>. Developers may implement <code>Blockchain</code> to connect to the Bitcoin network in custom ways.</p>
<h4 id='api-reference-apis-blockchain-network'>network</h4>
<p><code>network: string</code></p>

<p>A friendly network string. This is usually one of <code>main</code>, <code>test</code>, <code>stn</code>, or <code>mock</code>, however it may be any string. If the network starts with &#39;main&#39;, the Run library will use mainnet settings wherever it matters. For all other networks, Run will use testnet settings.</p>
<h4 id='api-reference-apis-blockchain-broadcast-rawtx'>broadcast(rawtx)</h4>
<blockquote>
<p>Create and broadcast a simple transaction</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">rawtx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bsv</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">utxo</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">to</span><span class="p">(</span><span class="nx">address</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">sign</span><span class="p">(</span><span class="nx">privateKey</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s1">'hex'</span><span class="p">)</span>

<span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">blockchain</span><span class="p">.</span><span class="nx">broadcast</span><span class="p">(</span><span class="nx">rawtx</span><span class="p">)</span>
</code></pre>
<p><code>broadcast(rawtx: string): Promise&lt;string&gt;</code></p>

<p>Submits a raw transaction in hex format to the network. A promise is returned that must resolve with the transaction ID if the transaction was accepted. If the network did not accept the transaction, then the promise should be rejected with the error. This method should resolve successfully for broadcasts of transactions which are already in the mempool.</p>
<h4 id='api-reference-apis-blockchain-fetch-txid'>fetch(txid)</h4>
<blockquote>
<p>Downloads a transaction from the network</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">txid</span> <span class="o">=</span> <span class="s1">'afc557ef2970af0b5fb8bc1a70a320af425c7a45ca5d40eac78475109563c5f8'</span>

<span class="kr">const</span> <span class="nx">rawtx</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">blockchain</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">txid</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bsv</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">(</span><span class="nx">rawtx</span><span class="p">)</span>
</code></pre>
<p><code>fetch(txid: string): Promise&lt;string&gt;</code></p>

<p>Downloads a transaction from the network. A promise is returned that will resolve with the raw hex transaction or reject with the error if the transaction could not be retrieved.</p>
<h4 id='api-reference-apis-blockchain-utxos-script'>utxos(script)</h4>
<blockquote>
<p>Downloads the current UTXOs for a given address</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">address</span> <span class="o">=</span> <span class="s1">'mpBU73vq9ajhkXknP1sNGe6wjXH7QtwmWm'</span>
<span class="kr">const</span> <span class="nx">script</span> <span class="o">=</span> <span class="nx">Script</span><span class="p">.</span><span class="nx">fromAddress</span><span class="p">(</span><span class="nx">address</span><span class="p">).</span><span class="nx">toHex</span><span class="p">()</span>
<span class="kr">const</span> <span class="nx">utxos</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">blockchain</span><span class="p">.</span><span class="nx">utxos</span><span class="p">(</span><span class="nx">script</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bsv</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">().</span><span class="nx">from</span><span class="p">(</span><span class="nx">utxos</span><span class="p">).</span><span class="nx">change</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span>
</code></pre>
<p><code>utxos(script: string): Promise&lt;Array&lt;{txid: string, vout: number, script: string, satoshis: number}&gt;&gt;</code></p>

<p>Returns the unspent outputs for a given address. A promise is returned that will resolve with an array of UTXOs, which may be empty, or reject with an error. Each returned UTXO may be converted to a <code>bsv.Transaction.UnspentOutput</code>. The output script passed into <code>utxos</code> will be in hex format.</p>

<p>Usually, implementations will index UTXOs by the script&#39;s hash rather than the script itself. The <code>utxos</code> method takes a full script however to support partial compatibility for certain script patterns like P2PKH that often have dedicated query APIs. To calculate a script hash from a script using the bsv library, use the following: <code>sha256(new Script(script).toBuffer()).reverse().toString(&#39;hex&#39;)</code>.</p>
<h4 id='api-reference-apis-blockchain-time-txid'>time(txid)</h4>
<p><code>time(txid: string): Promise&lt;number&gt;</code></p>

<p>Returns the block time the transaction was confirmed, or the mempool acceptance time if not yet in a block, in milliseconds since the unix epoch.</p>
<h4 id='api-reference-apis-blockchain-spends-txid-vout'>spends(txid, vout)</h4>
<p><code>spends(txid: string, vout: number): Promise&lt;?string&gt;</code></p>

<p>Returns the ID of the transaction that spends the given output, or null if the output is unspent.</p>

<p>If the Blockchain API does not support <code>spends</code>, it may return a <code>Run.error.NotImplementedError</code>, however, Run will only partially work in this case.</p>
<h3 id='api-reference-apis-cache'>Cache</h3>
<blockquote>
<p>A cache implementation that stores data in the browser&#39;s local storage</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">LocalStorageCache</span> <span class="p">{</span>
  <span class="nx">async</span> <span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="nx">async</span> <span class="nx">set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p><code>class Cache { ... }</code></p>

<p>The interface Run uses to cache jig state, transactions, and other data needed for fast use. The <code>Cache</code> API also enables third-party state servers to exist and provide the intermediate state of jigs. All values stored are immutable and JSON-serializable. They should not be modified or created by hand.</p>

<p>The following keys will be set by Run:</p>

<table><thead>
<tr>
<th>Key</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code>jig://&lt;location&gt;</code></td>
<td>Serialized state for jigs of any kind including objects, code, or berries</td>
</tr>
<tr>
<td><code>tx://&lt;txid&gt;</code></td>
<td>Raw transaction hex</td>
</tr>
<tr>
<td><code>time://&lt;txid&gt;</code></td>
<td>Transaction time in milliseconds since the unix epoch</td>
</tr>
<tr>
<td><code>spend://&lt;location&gt;</code></td>
<td>Transaction ID that spends the output</td>
</tr>
<tr>
<td><code>ban://&lt;location&gt;</code></td>
<td>Jig location that is known to be unloadable</td>
</tr>
</tbody></table>
<h4 id='api-reference-apis-cache-get-key'>get(key)</h4>
<p><code>get(key: string): Promise&lt;?object&gt;</code></p>

<p>Gets the value for a particular key. If this is an LRU cache, get() should also bump the key to the front.</p>

<p>Run will call this when loading jigs to see if it can short-circuit its loading. If a value exists and is valid state, Run will use it. This method is asyncronous to allow for third-party network calls.</p>
<h4 id='api-reference-apis-cache-set-key-value'>set(key, value)</h4>
<p><code>set(key: string, value: object): Promise&lt;void&gt;</code></p>

<p>Caches a value for a particular key.</p>

<p>Run will call this whenever a new transaction is published and also when a jig is loaded. This method is asyncronous to allow for third-party network calls.</p>
<h3 id='api-reference-apis-lock'>Lock</h3>
<blockquote>
<p>Send a token to a P2PK output script</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="p">{</span> <span class="nx">asm</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">extra</span>

<span class="kr">class</span> <span class="nx">PayToPublicKeyLock</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">pubkey</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">pubkey</span> <span class="o">=</span> <span class="nx">pubkey</span> <span class="p">}</span>
  <span class="nx">script</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">asm</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">pubkey</span><span class="p">}</span><span class="s2"> OP_CHECKSIG`</span><span class="p">)</span> <span class="p">}</span>
  <span class="nx">domain</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">74</span> <span class="p">}</span>
<span class="p">}</span>

<span class="nx">PayToPublicKeyLock</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">asm</span> <span class="p">}</span>

<span class="nx">token</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="k">new</span> <span class="nx">PayToPublicKeyLock</span><span class="p">(</span><span class="nx">pubkey</span><span class="p">))</span>
</code></pre>
<p><code>class Lock { ... }</code></p>

<p>Locks are custom output scripts that may be assigned as owners to jigs. Every lock is an instance of a lock class that is deployed on-chain. The lock class&#39;s <code>script()</code> method defines how the output script is built from the lock instance&#39;s properties. Because the lock class is also deployed on-chain, jig code can use logic that relies on strongly typed owners. For example, perhaps a jig must be held by 3 people in a <a href="#api-reference-extras-group">Group</a> for it to be used.</p>
<h4 id='api-reference-apis-lock-script'>script()</h4>
<p><code>script(): string</code></p>

<p>Returns the output script for the current lock as a hex string.</p>

<p>Run will call this method when building your transactions. Run provides the <a href="#api-reference-extras-asm">asm</a> utility function to more easily build these scripts. For security reasons, this function should always rebuild the script when it&#39;s invoked and never cache the results.</p>
<h4 id='api-reference-apis-lock-domain'>domain()</h4>
<p><code>domain(): number</code></p>

<p>Returns the maximum size of this lock&#39;s unlocking script in bytes. Run uses this value to improve fee estimation for signatures exist by creating placeholders in unlocking scripts that are of size <code>domain()</code>.</p>

<p>Calculating the <code>domain</code> may depend on various properties of the lock. As a rule of thumb, Bitcoin signatures are at most 74 bytes in script, and public keys when compressed are 34 bytes in script. It is best to err on the conservative side.</p>
<h3 id='api-reference-apis-logger'>Logger</h3>
<blockquote>
<p>Write info, warn, and error messages to a file</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">FileLogger</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">stream</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="p">{</span> <span class="na">flags</span><span class="p">:</span> <span class="s1">'a'</span> <span class="p">})</span> <span class="p">}</span>

  <span class="nx">info</span><span class="p">(...</span><span class="nx">messages</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'INFO'</span><span class="p">,</span> <span class="p">...</span><span class="nx">messages</span><span class="p">)</span> <span class="p">}</span>
  <span class="nx">warn</span><span class="p">(...</span><span class="nx">messages</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'WARN'</span><span class="p">,</span> <span class="p">...</span><span class="nx">messages</span><span class="p">)</span> <span class="p">}</span>
  <span class="nx">error</span><span class="p">(...</span><span class="nx">messages</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'ERROR'</span><span class="p">,</span> <span class="p">...</span><span class="nx">messages</span><span class="p">)</span> <span class="p">}</span>

  <span class="nx">log</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="p">...</span><span class="nx">messages</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">stream</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">type</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">messages</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">' '</span><span class="p">)}</span><span class="s2"> \n`</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="na">logger</span><span class="p">:</span> <span class="k">new</span> <span class="nx">FileLogger</span><span class="p">(</span><span class="s1">'log.txt'</span><span class="p">)</span> <span class="p">})</span>
</code></pre>
<p><code>class Logger { ... }</code></p>

<p>A custom logger API that may be used to intercept Run logs and send them to a more appropriate place. By default, Run will log errors and warnings to the console, but you may wish to log them to a custom file, or enable the info and debug logs too. It is not necessary to implement all methods below; whichever methods are implemented, Run will call.</p>
<h4 id='api-reference-apis-logger-info-messages'>info(...messages)</h4>
<p><code>info(...messages)</code></p>

<p>Called when Run is performing a major action, such as loading a jig, or querying a REST API.</p>
<h4 id='api-reference-apis-logger-error-messages'>error(...messages)</h4>
<p><code>error(...messages)</code></p>

<p>Called when Run detects an error. These are recommended for production logs.</p>
<h4 id='api-reference-apis-logger-warn-messages'>warn(...messages)</h4>
<p><code>warn(...messages)</code></p>

<p>Called when Run detects a possible error. These are recommended for production logs.</p>
<h4 id='api-reference-apis-logger-debug-messages'>debug(...messages)</h4>
<p><code>debug(...messages)</code></p>

<p>Called when Run creates debug messages. These will be more far verbose than you would typically expect in production logs.</p>
<h3 id='api-reference-apis-owner'>Owner</h3>
<blockquote>
<p>An owner that runs on a REST server</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">RemoteWallet</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">host</span><span class="p">,</span> <span class="nx">address</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">host</span> <span class="o">=</span> <span class="nx">host</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="nx">address</span>
  <span class="p">}</span>

  <span class="nx">async</span> <span class="nx">nextOwner</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">address</span> <span class="p">}</span>

  <span class="nx">async</span> <span class="nx">sign</span><span class="p">(</span><span class="nx">tx</span><span class="p">,</span> <span class="nx">parents</span><span class="p">,</span> <span class="nx">locks</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="s1">'POST'</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span> <span class="s1">'Content-Type'</span><span class="p">:</span> <span class="s1">'application/json'</span> <span class="p">},</span>
        <span class="na">body</span><span class="p">:</span> <span class="p">{</span> <span class="nx">tx</span><span class="p">,</span> <span class="nx">parents</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="kr">const</span> <span class="nx">rawtx</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s1">'/sign'</span><span class="p">,</span> <span class="nx">options</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">r</span> <span class="o">=&gt;</span> <span class="nx">r</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
    <span class="k">return</span> <span class="nx">rawtx</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p><code>class Owner { ... }</code></p>

<p>An owner of jigs and other resources that is <code>run.owner</code>.</p>

<p>Run calls the <code>Owner API</code> to create new jigs and sign transactions for the user. It is different from the purse which is strictly for paying for transactions. This API supports both local and remote ownership via the <code>async</code> methods.</p>

<p>For a complete guide on implementing the <code>Owner API</code> for a third-party wallet, please reach out to @niv in the Atlantis slack.</p>
<h4 id='api-reference-apis-owner-nextowner'>nextOwner()</h4>
<p><code>nextOwner(): Promise&lt;string|Lock&gt;</code></p>

<p>The owner address, pubkey, or lock, used to assign to new jigs.</p>
<h4 id='api-reference-apis-owner-sign-rawtx-parents-locks'>sign(rawtx, parents, locks)</h4>
<blockquote>
<p>Sign all resources that are P2PK outputs</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="nx">async</span> <span class="nx">sign</span><span class="p">(</span><span class="nx">rawtx</span><span class="p">,</span> <span class="nx">parents</span><span class="p">,</span> <span class="nx">locks</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bsv</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">(</span><span class="nx">rawtx</span><span class="p">)</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">inputs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">locks</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="k">instanceof</span> <span class="nx">PayToPublicKeyLock</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">sig</span> <span class="o">=</span> <span class="nx">generateSignature</span><span class="p">(</span><span class="nx">tx</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">parents</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="k">this</span><span class="p">.</span><span class="nx">privateKey</span><span class="p">)</span>

      <span class="nx">tx</span><span class="p">.</span><span class="nx">inputs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">setScript</span><span class="p">(</span><span class="nx">sig</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s1">'hex'</span><span class="p">))</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s1">'hex'</span><span class="p">)</span>
<span class="p">}</span>
</code></pre>
<p><code>sign(rawtx: string, parents: Array&lt;?{satoshis: number, script: string}&gt;, locks: Array&lt;?Lock&gt;): Promise&lt;string&gt;</code></p>

<p>Signs the transaction for the current jig owner.</p>

<p>The parents array is the same size as the transaction&#39;s inputs and contains a list of the parent outputs that are inputs in this transaction. This information may be needed to generate sighash values.</p>

<p>The third parameter, <code>locks</code>, are the jig owners for each jig input. This is a higher-level representation of the parent output scripts that allows the <code>sign</code> method to more easily determine which inputs to sign. If an input is not a jig, then its value in the array will be undefined. If the jig&#39;s owner is an address or public key, then the lock will be a <a href="#api-reference-util-commonlock">CommonLock</a>.</p>
<h3 id='api-reference-apis-purse'>Purse</h3>
<p><code>class Purse { ... }</code></p>

<p>An interface to pay for transactions that is the purse in Run. Run&#39;s default <code>Purse</code> implementation is <a href="#api-reference-plugins-localpurse">LocalPurse</a></p>

<p>For a complete guide on implementing the <code>Purse API</code> for a third-party wallet, please reach out to @niv in the Atlantis slack.</p>
<h4 id='api-reference-apis-purse-pay-rawtx-parents'>pay(rawtx, parents)</h4>
<blockquote>
<p>Pay for a transaction using specific UTXOs</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">PayWithUtxos</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="p">(</span><span class="nx">utxos</span><span class="p">,</span> <span class="nx">privateKey</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">utxos</span> <span class="o">=</span> <span class="nx">utxos</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">privateKey</span> <span class="o">=</span> <span class="nx">privateKey</span>
    <span class="p">}</span>

    <span class="nx">async</span> <span class="nx">pay</span><span class="p">(</span><span class="nx">rawtx</span><span class="p">)</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">bsv</span><span class="p">.</span><span class="nx">Transaction</span><span class="p">(</span><span class="nx">rawtx</span><span class="p">)</span>
        <span class="nx">tx</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">utxos</span><span class="p">)</span>
        <span class="nx">tx</span><span class="p">.</span><span class="nx">change</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">privateKey</span><span class="p">.</span><span class="nx">toAddress</span><span class="p">())</span>
        <span class="nx">tx</span><span class="p">.</span><span class="nx">sign</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">privateKey</span><span class="p">)</span>
        <span class="k">return</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s1">'hex'</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">run</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Run</span><span class="p">({</span> <span class="na">purse</span><span class="p">:</span> <span class="k">new</span> <span class="nx">PayWithUtxos</span><span class="p">(</span><span class="nx">utxos</span><span class="p">,</span> <span class="nx">privateKey</span><span class="p">)</span> <span class="p">})</span>
</code></pre>
<p><code>pay(rawtx: string, parents: Array&lt;{satoshis: number, script: string}&gt;): Promise&lt;string&gt;</code></p>

<p>Pays for a transaction so that it is acceptable to miners.</p>

<p>The transaction is passed in raw hex format. Raw transaction do not have information about their parent outputs, so the second parameter is a parents array that is a 1-1 mapping with the inputs of the transaction. This method should return a paid transaction in raw hex format.</p>

<p>To pay for a transaction, the method should add inputs and outputs so that its fee is raised high enough to be accepted by miners, and then the purse should sign the inputs it adds. As of May 2020, an appropriate miner fee is 0.5 satoshis per byte. The transaction passed will include placeholder signatures for any jig inputs to help with fee estimation.</p>

<p>This method should not assume that all inputs and outputs are dust because there may be <a href="#jigs-backing">backed jigs</a> that were updated or created. A third-party implementation can check that there are no backed jigs by looking for any non-dust inputs or outputs. Otherwise, the purse should be prepared to pay more than the miner fee to back jigs and receive change from unbacked jigs. </p>

<p><code>pay()</code> is an asynchronous call that returns a promise. If an error is thrown, then the state of all jigs in the transaction will be reverted and the transaction will not be broadcasted. It is up to the purse to add retry logic if needed.</p>
<h4 id='api-reference-apis-purse-broadcast-rawtx'>broadcast(rawtx)</h4>
<p><code>broadcast(rawtx: string): Promise&lt;&gt;</code></p>

<p>A notification for purses when a transaction they paid for is being broadcast.</p>

<p>This method is optional for purses. It is designed for wallets to update their UTXOs. Wallets may also choose to broadcast the transaction themselves but if they do they should expect that the sometimes transaction might already be received by the network.</p>
<h2 id='api-reference-util'>Util</h2>
<p>This section describes various helper functionality made available via <code>Run.util</code>.</p>
<h3 id='api-reference-util-commonlock'>CommonLock</h3>
<blockquote>
<p>Send a token to a P2PKH address</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="nx">token</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="k">new</span> <span class="nx">CommonLock</span><span class="p">(</span><span class="nx">address</span><span class="p">))</span>
</code></pre>
<p><code>class CommonLock implements Lock { ... }</code></p>

<p>The <code>CommonLock</code> generates a standard P2PKH output script for an address. It is created internally and automatically by Run whenever an address or public key is set as a jig owner. <code>CommonLock</code> instances are also passed into the <code>locks</code> array in the <a href="#api-reference-apis-owner">Owner API</a>&#39;s <code>sign</code> method, and they may be created and used on their own as seen on the right. <code>CommonLock</code> may be accessed via <code>Run.util.CommonLock</code>.</p>
<h4 id='api-reference-util-commonlock-constructor-address-testnet'>constructor(address, testnet)</h4>
<p><code>constructor(address: string, testnet: ?boolean): CommonLock</code></p>

<p>Creates a <code>CommonLock</code> for a specific address.</p>
<h4 id='api-reference-util-commonlock-address'>address</h4>
<p><code>address: string</code></p>

<p>The address string for this lock.</p>
<h4 id='api-reference-util-commonlock-testnet'>testnet</h4>
<p><code>testnet: ?boolean</code></p>

<p>Whether this address is intended for testnet (<code>true</code>), mainnet (<code>false</code>), or an unspecified network (<code>undefined</code>).</p>
<h3 id='api-reference-util-install-t'>install(T)</h3>
<blockquote>
<p>Preinstall a class with presets to share it in a library</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Token</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>

<span class="nx">Token</span><span class="p">.</span><span class="nx">presets</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">main</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">location</span><span class="p">:</span> <span class="s1">'b17a9af70ab0f46809f908b2e900e395ba40996000bf4f00e3b27a1e93280cf1_o1'</span><span class="p">,</span>
    <span class="na">origin</span><span class="p">:</span> <span class="s1">'b17a9af70ab0f46809f908b2e900e395ba40996000bf4f00e3b27a1e93280cf1_o1'</span><span class="p">,</span>
    <span class="na">nonce</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="na">owner</span><span class="p">:</span> <span class="s1">'1PytriYokKN3GpKw84L4vvrGBwUvTYzCpx'</span><span class="p">,</span>
    <span class="na">satoshis</span><span class="p">:</span> <span class="mi">0</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">install</span><span class="p">(</span><span class="nx">Token</span><span class="p">)</span>
</code></pre>
<p><code>install (T: function): Code</code></p>

<p>Installs a class or function as <a href="#api-reference-code">Code</a> but does not deploy it nor require a Run instance to be created. If the resulting code is synced or referenced by another creation, it will automatically be deployed in the next transaction. This method is sometimes useful for providing sandboxed code to third-parties without requiring a Run instance to be created. For example, the built-in <a href="#api-reference-extras">extras</a> that ship with Run are pre-installed code.</p>
<h3 id='api-reference-util-metadata-rawtx'>metadata(rawtx)</h3>
<blockquote>
<p>Print out the Run metadata</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="nx">Run</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">metadata</span><span class="p">(</span><span class="nx">rawtx</span><span class="p">)</span>

<span class="p">{</span>
  <span class="s2">"app"</span><span class="p">:</span> <span class="s2">""</span><span class="p">,</span>
  <span class="s2">"version"</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="s2">"in"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="s2">"ref"</span><span class="p">:</span> <span class="p">[</span>
      <span class="s2">"native://Jig"</span>
  <span class="p">],</span>
  <span class="s2">"out"</span><span class="p">:</span> <span class="p">[</span>
      <span class="s2">"e494cd3d0c33615620c22f44cddf85f2bf613fd608dbfc53822664581205d198"</span><span class="p">,</span>
      <span class="s2">"9a99596f417e8925cb25f2acf99abe28f014aaad47ce93c427ee3afd3bcc5084"</span>
  <span class="p">],</span>
  <span class="s2">"del"</span><span class="p">:</span> <span class="p">[],</span>
  <span class="s2">"cre"</span><span class="p">:</span> <span class="p">[</span>
      <span class="s2">"mhhHzeLjRTD4cjuygJFjqmCHCFpDKGrp75"</span><span class="p">,</span>
      <span class="s2">"mhhHzeLjRTD4cjuygJFjqmCHCFpDKGrp75"</span>
  <span class="p">],</span>
  <span class="s2">"exec"</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="s2">"op"</span><span class="p">:</span> <span class="s2">"DEPLOY"</span><span class="p">,</span>
        <span class="s2">"data"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"class A extends Jig { }"</span><span class="p">,</span> <span class="p">{</span> <span class="s2">"deps"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"Jig"</span><span class="p">:</span> <span class="p">{</span> <span class="s2">"$jig"</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}]</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="s2">"op"</span><span class="p">:</span> <span class="s2">"NEW"</span><span class="p">,</span>
        <span class="s2">"data"</span><span class="p">:</span> <span class="p">[{</span> <span class="s2">"$jig"</span><span class="p">:</span> <span class="mi">1</span> <span class="p">},</span> <span class="p">[]]</span>
      <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre>
<p><code>metadata(rawtx: string): object</code></p>

<p>Extracts all Layer-2 metadata from a Run transaction. The <code>metadata</code> function will throw an error if not passed a valid Run transaction in hex format. This method may be useful for debugging purposes and to determine whether a transaction is a Run transaction. The metadata returned is not intended to be executed outside Run. This metadata is stored in the first output using <code>OP_RETURN</code>. For more about this data structure, see <a href="#how-it-works">How It Works</a>. The <code>metadata</code> function may be accessed via <code>Run.util.metadata</code>.</p>
<h3 id='api-reference-util-unify-creations'>unify(...creations)</h3>
<blockquote>
<p>Unify references so that two classes can be deployed together</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="p">{</span> <span class="nx">unify</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">util</span>

<span class="nx">unify</span><span class="p">(</span><span class="nx">Axe</span><span class="p">,</span> <span class="nx">Sword</span><span class="p">)</span>

<span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">run</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">Axe</span><span class="p">)</span>
  <span class="nx">run</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">Sword</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>
<p><code>unify(...creations: Array&lt;Creation&gt;)</code></p>

<p>Synchronizes all creations so that they refer to the same objects in the same state. Run&#39;s protocol requires that creations are unified within a single transaction. This is usually performed automatically by Run before each method is executed. However, it may be useful to unify manually when using a <a href="#api-reference-transaction">Transaction</a> when creations are used across multiple actions and cannot be automatically unified.</p>
