<h1 id='advanced-usage'>Advanced Usage</h1><h2 id='advanced-usage-standard-metadata'>Standard Metadata</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">DigitalPet</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span> <span class="p">}</span>

<span class="nx">DigitalPet</span><span class="p">.</span><span class="nx">metadata</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">author</span><span class="p">:</span> <span class="s1">'Maximus'</span><span class="p">,</span>
  <span class="na">license</span><span class="p">:</span> <span class="s1">'MIT'</span><span class="p">,</span>
  <span class="na">emoji</span><span class="p">:</span> <span class="s1">'üêâ'</span>
<span class="p">}</span>

<span class="nx">run</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">DigitalPet</span><span class="p">)</span>
</code></pre>
<p>Wallets, explorers, and exchanges will want to show your jigs. You can add special metadata to any creation to help these services show them. This metadata is stored as an object called <code>metadata</code> on your jig, code, or berry and it contains properties that each mean something special. The following properties are considered <em>standard metadata</em>:</p>

<p><strong>Presentation</strong></p>

<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code>name</code></td>
<td>string</td>
<td>String name to use in place of the class or function name</td>
</tr>
<tr>
<td><code>description</code></td>
<td>string</td>
<td>Short sentence, less than 80 characters, that describes the jig for users</td>
</tr>
<tr>
<td><code>emoji</code></td>
<td>string</td>
<td>Single UTF-8 emoji character to represent the jig</td>
</tr>
<tr>
<td><code>image</code></td>
<td><a href="#api-reference-extras-b">B</a> instance</td>
<td>Reference to an SVG or PNG image stored using B://</td>
</tr>
</tbody></table>

<p><strong>Attribution and Licensing</strong></p>

<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code>author</code></td>
<td>string markdown</td>
<td>Name of the creator for the code or content</td>
</tr>
<tr>
<td><code>title</code></td>
<td>string markdown</td>
<td>Title of the content</td>
</tr>
<tr>
<td><code>source</code></td>
<td>string markdown</td>
<td>URL where the content was found</td>
</tr>
<tr>
<td><code>license</code></td>
<td>string markdown</td>
<td>License for the code or content</td>
</tr>
</tbody></table>

<p>You can start by setting these properties on your <em>jig classes</em>, as seen to the right. By convention, jig instances will automatically use the metadata from their class. However, jig instances may also have their own metadata that overrides its class metadata. You can put any information in <code>metadata</code> you deem important, even properties that are not listed above. More will become standard over time.</p>
<h2 id='advanced-usage-batch-transactions'>Batch Transactions</h2><pre class="highlight javascript tab-javascript"><code><span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">new</span> <span class="nx">CustomJig</span><span class="p">()</span>
  <span class="nx">anotherJig</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span>
<span class="p">})</span>
</code></pre>
<p>Multiple actions may be batched together into a single atomic Bitcoin transaction. In addition to making these actions all-or-nothing, batching also reduces fees. Any number of updates may be batched together from different jigs. Call <code>run.transaction()</code> and pass in a callback function that includes all of the actions that you want batched together. Note that owners must still sign off on every update to a jig, so if you just created a jig, you can&#39;t yet call a method on it, and if you just sent a jig to someone, they can&#39;t use it until the next transaction. If you need more advanced transaction control, see the <a href="#api-reference-transaction">Transaction API</a></p>
<h2 id='advanced-usage-caller-variable'>Caller Variable</h2>
<blockquote>
<p>Storing the parent jig</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Child</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="nx">caller</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<blockquote>
<p>Enforcing a method may only be called by certain classes</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Database</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">rootUser</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">rootUser</span> <span class="o">=</span> <span class="nx">rootUser</span>
  <span class="p">}</span>

  <span class="nx">deleteAll</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">caller</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">rootUser</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'only the root user may delete the database'</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">User</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">deleteDatabase</span><span class="p">(</span><span class="nx">database</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">database</span><span class="p">.</span><span class="nx">deleteAll</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p>Within Jig code, there is a special <code>caller</code> variable that is available. This variable is the jig that called this jig&#39;s methods or <code>null</code> if the jig&#39;s method was invoked from application code. Sidekicks do not get recorded so are never part of the caller stack.</p>

<p>You can use <code>caller</code> to keep track of where a jig came from by storing the parent jig inside of a child jig. You can also enforce that a child jig is created by a specific parent, or enforce that certain methods can only be called by certain jigs.</p>
<h2 id='advanced-usage-private-properties'>Private Properties</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Dragon</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_numberOfCrashLandings</span> <span class="o">=</span> <span class="mi">88</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">InsurancePolicy</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">dragon</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Throws an error !</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">dragon</span><span class="p">.</span><span class="nx">_numberOfCrashLandings</span> <span class="o">&gt;</span> <span class="mi">50</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">chargeMoreMoney</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p>Jigs may have private fields and private methods. These private properties prevent other jigs from depending on certain parts of your code. They allow you to better control the interface that users and other jigs rely on. Simply prefix your properties with an underscore to hide them. Run will enforce it.</p>

<p>Private variables may only be read inside a jig from one of its methods. If another kind of class attempts to read a private variable, Run will throw an error. Private variables may however be read externally in non-jig code, for example in the browser Console. You can use that ability to help you debug and check the values of private properties while you&#39;re developing your app.</p>

<p>Private methods are similar. They may only be called as helper methods from within the same jig, a jig of the same class, or the jig class itself. However, unlike private variables, you cannot call a private method externally in the web Console. If you think about it, that makes sense, because calling a private method externally would execute code with unintended consequences. Run keeps you safe.</p>

<aside class="warning">
<b>Warning:</b> Private properties are not encrypted. They are a tool to control access, not a feature for secrecy.
</aside>
<h2 id='advanced-usage-auth-method'>Auth Method</h2>
<blockquote>
<p>Limit the creation of jig instances by forcing the class to auth</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">SingleTonMonster</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">SingleTonMonster</span><span class="p">.</span><span class="nx">auth</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p>Every jig and every code has an  <code>auth()</code> method on it. To <em>auth</em> means to spend a jig. Authing a jig forces its owner to sign off on any actions performed. It also ensures that the jig&#39;s state is the latest. You may use <code>auth()</code> for many purposes, such as to have a class approve of the creation of instances, as seen to the right. You can also use it to get approval from several jigs before performing some action. For example, several players in a game may need to auth using their characters for some shared action to take place, like moving on to the next round. Authing is a fundamental action that will probably become more useful to you over time.</p>
<h2 id='advanced-usage-code-presets'>Code Presets</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Dragon</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">set</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Use the deploy tool to deploy the Dragon class and generate these presets</span>

<span class="nx">Dragon</span><span class="p">.</span><span class="nx">presets</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">main</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">origin</span><span class="p">:</span> <span class="s1">'bee45c75c37a289517f33ebfa051601c9610ccc56fbddfbabc44413db5b0bc1b_o1'</span>
    <span class="na">location</span><span class="p">:</span> <span class="s1">'bee45c75c37a289517f33ebfa051601c9610ccc56fbddfbabc44413db5b0bc1b_o1'</span><span class="p">,</span>
    <span class="na">nonce</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="na">owner</span><span class="p">:</span> <span class="s1">'13amCautaFqwbWV6MoC86xrh96W4fXGfDV'</span><span class="p">,</span>
    <span class="na">satoshis</span><span class="p">:</span> <span class="mi">0</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p>When you wish to create an instance of a jig from a class you&#39;ve already deployed, you have two options. Either you can load the class from the blockchain via <code>run.load</code> and then create an instance, or you can create an instance from a local class that has <em>presets</em> applied. When a local class has presets, Run doesn&#39;t have to download the code from the blockchain. Presets are a great way to share jig classes in NPM libraries.</p>

<p>You can use the <a href="#tools-deploy">Deploy Tool</a> to generate presets. However, you can also create them manually. To do this, upload your code to each Bitcoin network you wish to support using <code>run.deploy</code> in a script. The presets are <code>origin</code>, <code>location</code>, <code>nonce</code>, <code>owner</code>, and <code>satoshis</code> set onto a presets object for the given network. Run will detect these presets and automatically use the origins and locations on the appropriate network.</p>
<h2 id='advanced-usage-berries'>Berries</h2>
<blockquote>
<p>Load a metanet node</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">txid</span> <span class="o">=</span> <span class="s1">'2f24d7edb8de0ef534d8e0bc2413eddda451b4accc481519a1647d7af79d8e88'</span>
<span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">txid</span><span class="p">,</span> <span class="nx">MetanetNode</span><span class="p">)</span>
</code></pre>
<blockquote>
<p>Define the MetanetNode Berry</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">MetanetNode</span> <span class="kr">extends</span> <span class="nx">Berry</span> <span class="p">{</span>
  <span class="c1">// Its constructor can only be called by its pluck function. Run guarantees this.</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">pnode</span><span class="p">,</span> <span class="nx">parent</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">pnode</span> <span class="o">=</span> <span class="nx">pnode</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="nx">parent</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span>
  <span class="p">}</span>

  <span class="c1">// Run calls this pluck function when you call run.load with a Berry class.</span>
  <span class="kr">static</span> <span class="nx">async</span> <span class="nx">pluck</span><span class="p">(</span><span class="nx">location</span><span class="p">,</span> <span class="nx">fetch</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">txo</span><span class="p">(</span><span class="nx">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">location</span><span class="p">))</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">out</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">s1</span> <span class="o">===</span> <span class="s1">'meta'</span><span class="p">)</span> <span class="p">{</span>
      <span class="kr">const</span> <span class="nx">pnode</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">out</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">s2</span>
      <span class="kr">const</span> <span class="nx">txidParent</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">out</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">s3</span>
      <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">out</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">s4</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">data</span> <span class="o">===</span> <span class="s1">'METANET_ROOT'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">MetanetNode</span><span class="p">(</span><span class="nx">pnode</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="kr">const</span> <span class="nx">parentNode</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">MetanetNode</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">txidParent</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">MetanetNode</span><span class="p">(</span><span class="nx">pnode</span><span class="p">,</span> <span class="nx">parentNode</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">MetanetNode</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="na">txo</span><span class="p">:</span> <span class="nx">Run</span><span class="p">.</span><span class="nx">extra</span><span class="p">.</span><span class="nx">txo</span> <span class="p">}</span>
</code></pre>
<p>Third-party protocols, like Twetch, B, and Metanet, may be used within Run with Berries. Berries are JavaScript objects that capture arbitrary data on the blockchain. If you can write code to parse an OP_RETURN, you can create Berries. Berries are more than data though. They are objects. They can have methods, their types can be checked, they can be passed into jigs, stored as properties, cached, and more.</p>

<p>To load berries for an existing Berry protocol, simply call <code>BerryClass.load</code> and pass in the path to load. Run will be shipping with several built-in Berry protocols in the near future.</p>

<p>To define a new Berry protocol, simply extend from the <a href="#api-reference-berry">Berry</a> class and implement the static <code>pluck</code> method. Run calls your <code>pluck</code> method to load data at that location into a JavaScript object. Run fetches transaction data raw hex format, but you can parse it using the <a href="#api-reference-extras-txo">txo</a> or <a href="#api-reference-extras-tx">Tx</a> helpers. Berry classes get deployed on-chain too making them fully deterministic.</p>

<p>Once loaded, berries have locations that are extended to include both their protocol location and data location in the form: `<berry_class_location>?berry=<path>&amp;hash=<state-hash>&amp;version=<protocol>. This is a unique identifier and allows them to be cached securely.</p>

<aside class="notice">
<b>Note:</b> If this seems complex, don't worry! We expect most users will not have to write their own berries, and like plugins, there will be many berry protocols to choose from in the future. Stay tuned.
</aside>
<h2 id='advanced-usage-locks'>Locks</h2>
<blockquote>
<p>Send a token to a P2PK output script</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">PubkeyLock</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="nx">pubkey</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">pubkey</span> <span class="o">=</span> <span class="nx">pubkey</span> <span class="p">}</span>
  <span class="nx">script</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">asm</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">pubkey</span><span class="p">}</span><span class="s2"> OP_CHECKSIG`</span><span class="p">)</span> <span class="p">}</span>
  <span class="nx">domain</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">74</span> <span class="p">}</span>
<span class="p">}</span>

<span class="nx">PubkeyLock</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">asm</span> <span class="p">}</span>

<span class="nx">token</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="k">new</span> <span class="nx">PubkeyLock</span><span class="p">(</span><span class="nx">pubkey</span><span class="p">))</span>
</code></pre>
<blockquote>
<p>A provably unspendable lock</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Unspendable</span> <span class="p">{</span>
  <span class="nx">script</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">asm</span><span class="p">(</span><span class="s1">'OP_RETURN'</span><span class="p">)</span> <span class="p">}</span>
  <span class="nx">domain</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">}</span>
<span class="p">}</span>

<span class="nx">Unspendable</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">asm</span> <span class="p">}</span>
</code></pre>
<p>The default owner for a jig is a Bitcoin address. This is a great default, but sometimes you&#39;ll want more advanced ownership. For example, you may want a group to own a jig, so that no one party has exclusive control. Or you may wish for a jig to be provably owned by nobody. Both of these and more are possible with <em>locks</em>.</p>

<p>A <em>lock</em> is an object that produces a Bitcoin output script. You can set one as the <code>owner</code> on your jigs. Run ships with a <a href="#api-reference-extras-group">Group</a> lock class for multi-sig ownership, and you may also create your own locks by implementing the <a href="#api-reference-apis-lock">Lock API</a>. Your class will have two methods: <code>script()</code> and <code>domain()</code>. After implementing these methods, set the owner of a jig to an instance of your lock, and Run will produce an output with your script.</p>

<p>You&#39;ll probably also want to unlock your jigs to update them. To do that, create a corresponding key by implementing the <a href="#api-reference-apis-owner">Owner API</a>. Your implementation of <code>Owner</code> will need to implement to methods: <code>sign()</code> and <code>nextOwner()</code>.</p>

<p><code>Locks</code> are deterministic, typed, and run in a sandbox environment. This means they can be safely used inside jigs. But this also means they can&#39;t use the <code>bsv</code> library or similar external code. Run provides an <a href="#api-reference-extras-asm">asm</a> helper function to fill the gap when building custom scripts inside Lock classes.</p>

<aside class="notice">
<b>Note:</b> If this seems complex, don't worry! There will be many types of locks to choose from in the future, and most users won't need to write their own. Stay tuned.
</aside>
